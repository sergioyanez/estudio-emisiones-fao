import streamlit as st
import gdown
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import zipfile
import random
import numpy as np
import plotly.express as px
import pycountry
import geopandas as gpd
import plotly.graph_objects as go
import statsmodels.api as sm
import itertools
import time
import warnings
import logging

from statsmodels.tsa.statespace.sarimax import SARIMAX
from prophet import Prophet
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.seasonal import STL
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import acf
from statsmodels.tsa.stattools import adfuller, kpss
from statsmodels.tools.sm_exceptions import ValueWarning
from sklearn.metrics import mean_absolute_percentage_error
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Opcional: desactiva warnings excesivos
import warnings; warnings.filterwarnings("ignore")

st.set_page_config(
    page_title="TP Final - Ciencia de Datos",
    layout="wide"
)

st.title("üåç TP Final - Ciencia de Datos")
st.subheader("An√°lisis interactivo de emisiones de gases de efecto invernadero")
st.caption("Dataset FAOSTAT (1961‚Äì2021) ‚Ä¢ Visualizaci√≥n din√°mica ‚Ä¢ Comparaci√≥n por pa√≠s y fuente de emisi√≥n ‚Ä¢ Predicci√≥n a futuro")


def download_and_extract_zip_from_google_drive(file_id, output_dir, zip_name):
    URL = "https://docs.google.com/uc?export=download"
    session = requests.Session()
    response = session.get(URL, params={'id': file_id}, stream=True)
    for key, value in response.cookies.items():
        if key.startswith('download_warning'):
            response = session.get(URL, params={'id': file_id, 'confirm': value}, stream=True)
            break
    os.makedirs(output_dir, exist_ok=True)
    zip_path = os.path.join(output_dir, zip_name)
    with open(zip_path, 'wb') as f:
        for chunk in response.iter_content(32768):
            f.write(chunk)
    with ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(output_dir)
    os.remove(zip_path)

csv_path = "data/raw/excercise/Emisiones_Totales_S_Todos_los_Datos_(Normalizado).csv"
if not os.path.exists(csv_path):
    st.info("Descargando dataset desde Google Drive...")
    download_and_extract_zip_from_google_drive(
        file_id="1hDcwMcaajRkoaO8trMqqc8DWObGkZl8v",
        output_dir="data/raw/excercise",
        zip_name="Emisiones_Totales_S_Todos_los_Datos_(Normalizado).zip"
    )

df = pd.read_csv(csv_path)
df = df[df['Valor'].notna()]
df['Valor_Mt'] = df['Valor'] / 1e3           # megatoneladas
df['Valor_Gt'] = df['Valor'] / 1e6           # gigatoneladas
df['A√±o'] = pd.to_datetime(df['A√±o'], format='%Y')

# KPIs
# C√°lculos
total_emisiones = df['Valor_Mt'].sum()
anio_min = df['A√±o'].dt.year.min()
anio_max = df['A√±o'].dt.year.max()
total_paises = df['√Årea'].nunique()

# Dise√±o con columnas
col1, col2, col3 = st.columns(3)

col1.metric("üåç Total emisiones (Mt)", f"{total_emisiones:,.2f}")
col2.metric("üìÖ A√±os cubiertos", f"{anio_min} ‚Äì {anio_max}")
col3.metric("üó∫Ô∏è Pa√≠ses √∫nicos", total_paises)


# Mostrar rango temporal
anio_min = df['A√±o'].min().strftime('%Y')
anio_max = df['A√±o'].max().strftime('%Y')

st.subheader(f'üìÜ Rango temporal de los datos: {anio_min}  a  {anio_max}')


# Evoluci√≥n por a√±o
df_anual = df.groupby(df['A√±o'].dt.year).size().reset_index(name='Cantidad')
fig_anual = px.bar(df_anual, x='A√±o', y='Cantidad', title="Cantidad de registros por a√±o")
st.plotly_chart(fig_anual, use_container_width=True)

df_cleaned = df.drop(columns=['Nota','C√≥digo del √°rea', 'C√≥digo del √°rea (M49)', 'C√≥digo del elemento', 'C√≥digo del a√±o', 'C√≥digo fuente']).copy()


regiones = [
    'Mundo', 'Pa√≠ses Anexo I', 'Pa√≠ses No-Anexo I', 'Uni√≥n Europea (27)', 'Uni√≥n Europea (28)',
    '√Åfrica', 'Am√©ricas', 'Europa', 'Asia', 'Ocean√≠a',
    '√Åfrica occidental', '√Åfrica central', '√Åfrica oriental', '√Åfrica meridional', '√Åfrica septentrional',
    'Am√©rica central', 'Am√©rica del Sur', 'Am√©rica septentrional',
    'Europa occidental', 'Europa oriental', 'Europa septentrional', 'Europa meridional',
    'Asia central', 'Asia oriental', 'Asia occidental', 'Asia sudoriental', 'Asia meridional',
    'Australia y Nueva Zelandia', 'El Caribe', 'Melanesia', 'Polinesia', 'Micronesia',
    'OECD', 'URSS', 'Checoslovaq', 'Yugoslav RFS',
    'Los pa√≠ses menos desarrollados', 'Pa√≠ses sin litoral en v√≠as de desarrollo',
    'Pa√≠ses de bajos ingresos y con d√©ficit de alim.', 'Peque√±as islas en v√≠as de Desarrollo',
    'Import netos alim en Des', 'Territorio de las Islas del Pac√≠fico', 'China, Continental'
    ]
df_regiones = df_cleaned[df_cleaned['√Årea'].isin(regiones)].copy()
df_countries = df_cleaned[~df_cleaned['√Årea'].isin(regiones)].copy()
st.subheader("Cantidad de pa√≠ses: " + str(df_countries['√Årea'].nunique()))
# Total original
total_original = len(df_cleaned)

# Total despu√©s de separar
total_regiones = len(df_regiones)
total_paises = len(df_countries)

# Verificar
col1, col2 = st.columns(2)

with col1:
    st.metric("üßÆ Total original", total_original)
    st.metric("üåç Total regiones", total_regiones)

with col2:
    st.metric("üåé Total pa√≠ses", total_paises)
    st.metric("‚ûï Suma regiones + pa√≠ses", total_regiones + total_paises)


countries = df_countries['√Årea'].unique()
fixes = {
    'Anguila': 'Anguilla',
    'Bahrein': 'Bahrain',
    'Bermudas': 'Bermuda',
    'Bhut√°n': 'Bhutan',
    'B√©lgica': 'Belgium',
    'Cabo Verde': 'Cape Verde',
    'Chequia': 'Czechia',
    'Chipre': 'Cyprus',
    'Comoras': 'Comoros',
    'Emiratos √Årabes Unidos': 'United Arab Emirates',
    'Gambia': 'The Gambia',
    'Granada': 'Grenada',
    'Guadalupe': 'Guadeloupe',
    'Guayana Francesa': 'French Guiana',
    'Isla Norfolk': 'Norfolk Island',
    'Isla de Man': 'Isle of Man',
    'Islas Anglonormandas': 'Channel Islands',
    'Islas Caim√°n': 'Cayman Islands',
    'Islas Cook': 'Cook Islands',
    'Islas Feroe': 'Faroe Islands',
    'Islas Marianas del Norte': 'Northern Mariana Islands',
    'Islas Marshall': 'Marshall Islands',
    'Islas Salom√≥n': 'Solomon Islands',
    'Islas Svalbard y Jan Mayen': 'Svalbard and Jan Mayen',
    'Islas Turcas y Caicos': 'Turks and Caicos Islands',
    'Islas V√≠rgenes Brit√°nicas': 'British Virgin Islands',
    'Islas V√≠rgenes de los Estados Unidos': 'United States Virgin Islands',
    'Islas Wallis y Futuna': 'Wallis and Futuna',
    'Martinica': 'Martinique',
    'M√≥naco': 'Monaco',
    'Nueva Caledonia': 'New Caledonia',
    'Palestina': 'Palestine',
    'Pa√≠ses Bajos (Reino de los)': 'Netherlands',
    'Polinesia Francesa': 'French Polynesia',
    'Rep√∫blica Democr√°tica del Congo': 'Democratic Republic of the Congo',
    'Rep√∫blica Democr√°tica Popular Lao': "Lao People's Democratic Republic",
    'Rep√∫blica Popular Democr√°tica de Corea': "Democratic People's Republic of Korea",
    'Reuni√≥n': 'R√©union',
    'Saint Kitts y Nevis': 'Saint Kitts and Nevis',
    'Samoa Americana': 'American Samoa',
    'San Pedro y Miquel√≥n': 'Saint Pierre and Miquelon',
    'Santa Elena, Ascensi√≥n y Trist√°n de Acu√±a': 'Saint Helena, Ascension and Tristan da Cunha',
    'Santa Sede': 'Holy See',
    'Sierra Leona': 'Sierra Leone',
    'Sud√°n (ex)': 'Sudan',
    'S√°hara Occidental': 'Western Sahara',
    'Timor-Leste': 'Timor-Leste',
    'Trinidad y Tabago': 'Trinidad and Tobago',
    'Yugoslav RFS': 'Yugoslavia',
    "Afganist√°n": "Afghanistan",
    "Albania": "Albania",
    "Alemania": "Germany",
    "Angola": "Angola",
    "Antigua y Barbuda": "Antigua and Barbuda",
    "Arabia Saudita": "Saudi Arabia",
    "Argelia": "Algeria",
    "Argentina": "Argentina",
    "Armenia": "Armenia",
    "Austria": "Austria",
    "Azerbaiy√°n": "Azerbaijan",
    "Banglad√©s": "Bangladesh",
    "Bar√©in": "Bahrain",
    "Belice": "Belize",
    "Belar√∫s": "Belarus",
    "Bolivia (Estado Plurinacional de)": "Bolivia",
    "Bosnia y Herzegovina": "Bosnia and Herzegovina",
    "Botsuana": "Botswana",
    "Brasil": "Brazil",
    "Brun√©i Darussalam": "Brunei",
    "Bulgaria": "Bulgaria",
    "Burkina Faso": "Burkina Faso",
    "Camboya": "Cambodia",
    "Camer√∫n": "Cameroon",
    "Canad√°": "Canada",
    "Chad": "Chad",
    "Chile": "Chile",
    "China": "China",
    "Colombia": "Colombia",
    "Corea, Rep√∫blica de": "South Korea",
    "Costa de Marfil": "Ivory Coast",
    "Croacia": "Croatia",
    "Cuba": "Cuba",
    "Dinamarca": "Denmark",
    "Ecuador": "Ecuador",
    "Egipto": "Egypt",
    "El Salvador": "El Salvador",
    "Eritrea": "Eritrea",
    "Eslovaquia": "Slovakia",
    "Eslovenia": "Slovenia",
    "Espa√±a": "Spain",
    "Estados Unidos de Am√©rica": "United States of America",
    "Estonia": "Estonia",
    "Esuatini": "Eswatini",
    "Etiop√≠a": "Ethiopia",
    "Filipinas": "Philippines",
    "Finlandia": "Finland",
    "Francia": "France",
    "Gab√≥n": "Gabon",
    "Georgia": "Georgia",
    "Ghana": "Ghana",
    "Grecia": "Greece",
    "Groenlandia": "Greenland",
    "Guatemala": "Guatemala",
    "Guinea": "Guinea",
    "Guinea-Bissau": "Guinea-Bissau",
    "Guinea Ecuatorial": "Equatorial Guinea",
    "Hait√≠": "Haiti",
    "Honduras": "Honduras",
    "Hungr√≠a": "Hungary",
    "India": "India",
    "Indonesia": "Indonesia",
    "Irak": "Iraq",
    "Ir√°n (Rep√∫blica Isl√°mica del)": "Iran",
    "Irlanda": "Ireland",
    "Islandia": "Iceland",
    "Israel": "Israel",
    "Italia": "Italy",
    "Jap√≥n": "Japan",
    "Jordania": "Jordan",
    "Kazajst√°n": "Kazakhstan",
    "Kenia": "Kenya",
    "Kirguist√°n": "Kyrgyzstan",
    "L√≠bano": "Lebanon",
    "Liberia": "Liberia",
    "Libia": "Libya",
    "Lesoto": "Lesotho",
    "Letonia": "Latvia",
    "Lituania": "Lithuania",
    "Luxemburgo": "Luxembourg",
    "Madagascar": "Madagascar",
    "Malasia": "Malaysia",
    "Malawi": "Malawi",
    "Maldivas": "Maldives",
    "Mal√≠": "Mali",
    "Malta": "Malta",
    "Marruecos": "Morocco",
    "Mauricio": "Mauritius",
    "Mauritania": "Mauritania",
    "M√©xico": "Mexico",
    "Micronesia (Estados Federados de)": "Federated States of Micronesia",
    "Mongolia": "Mongolia",
    "Montenegro": "Montenegro",
    "Mozambique": "Mozambique",
    "Namibia": "Namibia",
    "Nepal": "Nepal",
    "Nicaragua": "Nicaragua",
    "N√≠ger": "Niger",
    "Nigeria": "Nigeria",
    "Noruega": "Norway",
    "Nueva Zelandia": "New Zealand",
    "Om√°n": "Oman",
    "Pakist√°n": "Pakistan",
    "Panam√°": "Panama",
    "Papua Nueva Guinea": "Papua New Guinea",
    "Paraguay": "Paraguay",
    "Per√∫": "Peru",
    "Polonia": "Poland",
    "Portugal": "Portugal",
    "Qatar": "Qatar",
    "Reino Unido de Gran Breta√±a e Irlanda del Norte": "United Kingdom",
    "Rep√∫blica √Årabe Siria": "Syria",
    "Rep√∫blica Centroafricana": "Central African Republic",
    "Rep√∫blica Checa": "Czech Republic",
    "Rep√∫blica de Corea": "South Korea",
    "Rep√∫blica de Moldova": "Moldova",
    "Rep√∫blica Dominicana": "Dominican Republic",
    'Rep√∫blica Unida de Tanzan√≠a': 'Tanzania',
    "RDP Lao": "Laos",
    "Ruman√≠a": "Romania",
    "Federaci√≥n de Rusia": "Russian Federation",
    "San Crist√≥bal y Nieves": "Saint Kitts and Nevis",
    "Santa Luc√≠a": "Saint Lucia",
    "San Vicente y las Granadinas": "Saint Vincent and the Grenadines",
    "Santo Tom√© y Pr√≠ncipe": "Sao Tome and Principe",
    "Samoa": "Samoa",
    "Senegal": "Senegal",
    "Serbia": "Serbia",
    "Seychelles": "Seychelles",
    "Singapur": "Singapore",
    "Sri Lanka": "Sri Lanka",
    "Sud√°frica": "South Africa",
    "Sud√°n": "Sudan",
    "Sud√°n del Sur": "South Sudan",
    "Suecia": "Sweden",
    "Suiza": "Switzerland",
    "Suriname": "Suriname",
    "Tailandia": "Thailand",
    "Tanzania, Rep√∫blica Unida de": "Tanzania",
    "Tayikist√°n": "Tajikistan",
    "Timor-Leste": "East Timor",
    "Tonga": "Tonga",
    "Trinidad y Tobago": "Trinidad and Tobago",
    "T√∫nez": "Tunisia",
    "Turkmenist√°n": "Turkmenistan",
    "Turqu√≠a": "T√ºrkiye",
    "Ucrania": "Ukraine",
    "Uruguay": "Uruguay",
    "Uzbekist√°n": "Uzbekistan",
    "Venezuela (Rep√∫blica Bolivariana de)": "Venezuela",
    "Viet Nam": "Vietnam",
    "Yemen": "Yemen",
    "Zambia": "Zambia",
    "Zimbabue": "Zimbabwe",
    "Estado de Palestina": "Palestine",
    "Macedonia del Norte": "North Macedonia",
    'Rep√∫blica del Congo': 'Congo',
}

# Aplicar correcciones
fixed_countries = [fixes.get(p, p) for p in countries]

# Obtener c√≥digo ISO-3 para cada pa√≠s
def get_iso3(name):
    '''
    Esta funci√≥n busca cada nombre en la base de datos oficial de pycountry:

    Si encuentra el pa√≠s  devuelve el c√≥digo ISO-3 (ARG para Argentina, BRA para Brasil, etc.).

    Si falla (nombre raro, no existe)  devuelve None
    '''
    try:
        return pycountry.countries.lookup(name).alpha_3
    except:
        return None

iso_codes = [get_iso3(p) for p in fixed_countries] #  obtiene una lista de c√≥digos ISO-3 o None si fall√≥
df_map = pd.DataFrame({'country': countries, 'iso_alpha': iso_codes}) # Crea un nuevo DataFrame con dos columnas:'country' ‚Üí nombre original (sin correcci√≥n), 'iso_alpha' ‚Üí c√≥digo ISO-3 resultante (de la versi√≥n corregida)
df_map = df_map.dropna()  # Elimina las filas donde iso_alpha es None.

# A√±adir una columna "coverage" para indicar cobertura
df_map['coverage'] = 1  # 1 = incluido en el dataset

st.subheader("Cobertura geogr√°fica del dataset FAOSTAT")
fig = px.choropleth(
    df_map,
    locations='iso_alpha',
    color='coverage',
    hover_name='country',
    color_continuous_scale=[[0, 'lightgrey'], [1, 'green']],
    title='Cobertura FAOSTAT'
)
fig.update_geos(bgcolor='lightblue',showcountries=True, showcoastlines=True, showland=True, fitbounds="locations")
fig.update_layout(coloraxis_showscale=False, margin={"r":10,"t":40,"l":10,"b":10})
st.plotly_chart(fig, use_container_width=True)



st.subheader("Registros por pa√≠s por a√±o:")
st.markdown("Expansi√≥n en la cobertura de pa√≠ses a partir de 1990*  \n"
            "A partir del a√±o 1990 se observa un incremento significativo en la cantidad de pa√≠ses con datos disponibles. Este cambio no necesariamente implica un aumento real en las emisiones,"
            " sino una mejora en la cobertura geogr√°fica del dataset.  \n"
            "En total, se incorporan 52 nuevos pa√≠ses/regiones despu√©s de 1990, lo que puede influir en los an√°lisis agregados si no se controla adecuadamente.*  \n"
            "Para evitar conclusiones err√≥neas, este notebook incluye filtros y comparaciones que tienen en cuenta este cambio estructural en la base de datos.*")


#Agrupar por pa√≠s y a√±o
df_anual = df_countries.groupby(['√Årea', 'A√±o']).size().reset_index(name='records')
df_group = df_countries.groupby('√Årea').agg({'Valor_Mt': 'sum'}).reset_index()

#Aplicar equivalencias de nombres
df_anual['country'] = df_anual['√Årea'].replace(fixes)
df_anual['iso_alpha'] = df_anual['country'].apply(get_iso3)
df_anual = df_anual[df_anual['iso_alpha'].notnull()]


#Crear mapa animado
fig = px.choropleth(
    df_anual,
    locations='iso_alpha',
    color='records',
    hover_name='country',
    color_continuous_scale='Viridis',
    animation_frame='A√±o',
    title='Evoluci√≥n anual de registros por pa√≠s'
)

fig.update_geos(showcountries=True, showcoastlines=True, showland=True, fitbounds="locations")
fig.update_layout(margin={"r":0,"t":50,"l":0,"b":0})
st.plotly_chart(fig, use_container_width=True)


# Selector de pa√≠s
st.subheader("Evoluci√≥n temporal por pa√≠s")
pais_sel = st.selectbox("Seleccionar pa√≠s", sorted(df['√Årea'].unique()))
df_pais = df[df['√Årea'] == pais_sel]
df_serie = df_pais.groupby(df_pais['A√±o'].dt.year)['Valor_Mt'].sum().reset_index()
fig_pais = px.line(df_serie, x='A√±o', y='Valor_Mt', title=f"Evoluci√≥n de emisiones en {pais_sel}")
st.plotly_chart(fig_pais, use_container_width=True)

# Top pa√≠ses
st.subheader("Top 10 pa√≠ses con m√°s emisiones")
df_top = df_group.sort_values("Valor_Mt", ascending=False).head(10)
fig_top = px.bar(df_top, x='√Årea', y='Valor_Mt', title="Top 10 pa√≠ses con m√°s emisiones")
st.plotly_chart(fig_top, use_container_width=True)

st.subheader("Consideraciones sobre Productos Reportados")
st.markdown("El n√∫mero de productos reportados cambia significativamente con el tiempo:  \n"
            "- **Antes de 1990**: solo 16 productos reportados.  \n"
            "- **Despu√©s de 1990**: m√°s de 40 productos.  \n"
            "Este cambio refleja una expansi√≥n en el nivel de detalle del inventario de emisiones, tanto en cobertura tem√°tica como en precisi√≥n metodol√≥gica. "
            "Sin embargo, tambi√©n introduce un **sesgo estructural** en los an√°lisis temporales agregados.")

products_before_1990 = set(df_cleaned[df_cleaned['A√±o'] < '1990']['Producto'].unique())
products_after_1990 = set(df_cleaned[df_cleaned['A√±o'] >= '1990']['Producto'].unique())

products = products_before_1990 & products_after_1990
new_products = products_after_1990 - products_before_1990

st.subheader("Comparaci√≥n de productos por per√≠odo")

st.write(f"üì¶ Productos antes de 1990: {len(products_before_1990)}")
st.write(f"üì¶ Productos despu√©s de 1990: {len(products_after_1990)}")
st.write(f"üîÅ Productos comunes: {len(products)}")
st.write(f"üÜï Productos nuevos desde 1990: {len(new_products)}")



st.markdown("### Delimitaci√≥n temporal del an√°lisis  \n"
            "Debido a los cambios estructurales observados en la cobertura geogr√°fica y tem√°tica del dataset, se ha decidido restringir el an√°lisis a los datos disponibles **a partir del a√±o 1990**."
            "Esta decisi√≥n responde a dos razones principales:  \n"
            "- **Mayor cobertura geogr√°fica**: a partir de 1990 se incorporan 52 nuevos pa√≠ses, alcanzando un total de 238. Esto garantiza que los an√°lisis comparativos entre regiones y pa√≠ses no est√©n sesgados por datos ausentes en d√©cadas anteriores.  \n"
            "- **Mayor cobertura tem√°tica**: el n√∫mero de productos reportados aumenta de 16 (antes de 1990) a m√°s de 40 (despu√©s), lo que introduce una mejora en el detalle metodol√≥gico, pero tambi√©n limita la comparabilidad hist√≥rica.  \n"
            "### Justificaci√≥n  \n"
            "Trabajar con el subconjunto de datos posterior a 1990 permite realizar an√°lisis **m√°s consistentes, representativos y comparables** reduciendo el riesgo de conclusiones err√≥neas causadas por diferencias de cobertura y disponibilidad de informaci√≥n."
            "En consecuencia, **todas las visualizaciones y estad√≠sticas agregadas en este informe se basar√°n en datos desde 1990 a 2025, por lo cual no vamos a tener en cuenta estimaciones futuras**."
)

df_completed = df_cleaned.copy()
df_01 = df_cleaned[(df_cleaned['A√±o'] >= '1990') & (df_cleaned['A√±o'] <= '2025')].copy()

st.markdown("## Variables de Emisi√≥n  \n"
            "El conjunto de datos original incluye m√∫ltiples tipos de elementos relacionados con las emisiones de gases, entre ellos: ")

elementos = df_01['Elemento'].unique()
st.markdown("### Tipos de emisiones registradas:")
for elem in elementos:
    st.markdown(f"- {elem}")
st.subheader("")
st.markdown("## Comparaci√≥n de Cobertura por Fuente (FAO vs UNFCCC)")


# Ver pa√≠ses √∫nicos por fuente
fao_data = set(df_01[df_01['Fuente'] == 'FAO TIER 1']['√Årea'].unique())
unfccc_data = set(df_01[df_01['Fuente'] == 'UNFCCC']['√Årea'].unique())

st.subheader("Comparaci√≥n de cobertura por fuente de datos")
st.write(f"üåæ Pa√≠ses y regiones con datos **FAO TIER 1**: {len(fao_data)}")
st.write(f"üåç Pa√≠ses y regiones con datos **UNFCCC**: {len(unfccc_data)}")
st.write(f"‚úÖ Pa√≠ses y regiones en **ambas fuentes**: {len(fao_data & unfccc_data)}")
st.write(f"üü¢ Solo en **FAO TIER 1**: {len(fao_data - unfccc_data)}")
st.write(f"üîµ Solo en **UNFCCC**: {len(unfccc_data - fao_data)}")

st.markdown("""
### üìö Sobre las fuentes de datos

El conjunto de datos incluye emisiones reportadas por dos fuentes distintas: **FAO TIER 1** y **UNFCCC**. Estas fuentes utilizan metodolog√≠as diferentes:

- **FAO TIER 1**: Estimaciones generadas por la FAO usando metodolog√≠as estandarizadas (*IPCC Tier 1*). Ofrece cobertura global y permite analizar series temporales largas de manera consistente, aunque con menor precisi√≥n pa√≠s-espec√≠fica.

- **UNFCCC**: Datos reportados directamente por los pa√≠ses miembros del Convenio Marco de las Naciones Unidas sobre el Cambio Clim√°tico. Son m√°s precisos pero no est√°n disponibles para todos los pa√≠ses ni todos los a√±os.

Para garantizar la **consistencia del an√°lisis exploratorio** y evitar duplicidades (m√∫ltiples registros para un mismo pa√≠s, a√±o y tipo de emisi√≥n), separamos los datos por fuente.  
En este an√°lisis general utilizaremos principalmente los datos provenientes de **FAO TIER 1**, ya que brindan una cobertura m√°s amplia y continua en el tiempo.

üìå En secciones posteriores, se podr√° comparar con los datos de **UNFCCC** para identificar posibles diferencias metodol√≥gicas o validar tendencias observadas.
""")

df_fao = df_01[df_01['Fuente'] == 'FAO TIER 1'].copy()

st.markdown("""
## üßæ Descripci√≥n de los indicadores

### 1. Emisiones directas (N‚ÇÇO)
Emisiones de √≥xido nitroso (**N‚ÇÇO**) que se liberan directamente al aire desde su fuente, por ejemplo:

- Aplicaci√≥n de fertilizantes nitrogenados al suelo.

---

### 2. Emisiones indirectas (N‚ÇÇO)
Emisiones de **N‚ÇÇO** que ocurren despu√©s de procesos intermedios, como:

- Lixiviaci√≥n de nitr√≥geno al agua.  
- Volatilizaci√≥n (evaporaci√≥n y deposici√≥n posterior).

Estas emisiones ocurren fuera del punto de aplicaci√≥n pero son atribuibles a pr√°cticas agr√≠colas.

---

### 3. Emisiones (N‚ÇÇO)
Suma total de **Emisiones directas + Emisiones indirectas** de N‚ÇÇO.  
Representa la emisi√≥n completa de N‚ÇÇO atribuible a la agricultura/ganader√≠a.

---

### 4. Emisiones (CO‚ÇÇeq) proveniente de N‚ÇÇO (AR5)
Las emisiones de N‚ÇÇO convertidas a **CO‚ÇÇ equivalente** usando el factor del 5¬∫ Informe del IPCC (AR5):  

- N‚ÇÇO tiene un GWP (Global Warming Potential) de **265**.  
- Ejemplo: 1 kt de N‚ÇÇO ‚Üí 265 kt de CO‚ÇÇeq.

Esto permite comparar gases con diferente efecto clim√°tico.

---

### 5. Emisiones (CO‚ÇÇeq) (AR5)
Este es el indicador total combinado, ya convertido a **CO‚ÇÇeq (seg√∫n AR5)**.  
Incluye:

- CO‚ÇÇ  
- CH‚ÇÑ convertido a CO‚ÇÇeq  
- N‚ÇÇO convertido a CO‚ÇÇeq  
- F-gases  

Es la m√©trica recomendada para **comparaciones globales** de impacto clim√°tico.

---

### 6. Emisiones (CH‚ÇÑ)
Emisiones directas de metano (**CH‚ÇÑ**), especialmente desde:

- Fermentaci√≥n ent√©rica en ganado.  
- Cultivo de arroz.

üìè Unidad: kilotoneladas de CH‚ÇÑ.

---

### 7. Emisiones (CO‚ÇÇeq) proveniente de CH‚ÇÑ (AR5)
CH‚ÇÑ convertido a **CO‚ÇÇeq** usando GWP del AR5:

- CH‚ÇÑ tiene un GWP de **28**.  
- 1 kt de CH‚ÇÑ ‚Üí 28 kt de CO‚ÇÇeq.

Permite estimar el efecto clim√°tico del metano en t√©rminos comparables.

---

### 8. Emisiones (CO‚ÇÇ)
Emisiones directas de di√≥xido de carbono (**CO‚ÇÇ**).  
Pueden provenir de maquinaria agr√≠cola, quema de residuos, etc.

üìè Unidad: kilotoneladas de CO‚ÇÇ.

---

### 9. Emisiones (CO‚ÇÇeq) proveniente de F-gases (AR5)
Gases fluorados (**HFCs, PFCs, SF‚ÇÜ**) convertidos a CO‚ÇÇeq.  
Aunque no provienen t√≠picamente de agricultura, pueden aparecer si se incluyen procesos industriales vinculados.

üí• Tienen alt√≠simos GWP (hasta miles de veces el del CO‚ÇÇ).
""")


st.markdown("# An√°lisis Exploratorio de Datos (EDA)  \n")
with st.expander("üåç An√°lisis Global y Comparativo por Continente de Emisiones Totales incluyendo LULUCF"):
    st.markdown("""
Para este an√°lisis vamos a tomar en cuenta el indicador **CO‚ÇÇeq (AR5)**, que es la suma estimada de los tres gases principales, ya convertidos por su impacto clim√°tico.

Adem√°s, vamos a utilizar el agregado **"Emisiones Totales incluyendo LULUCF"**. Este agregado es la suma de todas las fuentes de gases de efecto invernadero del sistema agroalimentario (farm gate + cambio de uso del suelo + procesos pre- y pos-producci√≥n) m√°s el resto de sectores **IPCC**.

**¬øQu√© significa LULUCF?**  
Land Use, Land-Use Change and Forestry.

Es el sector que captura o emite **CO‚ÇÇ (u otros gases)** cuando se utiliza la tierra (pasturas, cultivos), se cambia el uso de la tierra (deforestaci√≥n, expansi√≥n urbana) y silvicultura (tala y repoblaci√≥n forestal, incendios forestales).
""")

gas = 'Emisiones (CO2eq) (AR5)'
continents = [
    'Am√©ricas',
    '√Åfrica',
    'Europa',
    'Asia',
    'Ocean√≠a',
    'Mundo'
]
product_code = 6825 # Emisiones Totales incluyendo LULUCF

df_continents = df_fao[
    (df_fao['√Årea'].isin(continents)) &
    (df_fao['Elemento'] == gas) &
    (df_fao['C√≥digo del producto'] == product_code)
    ].copy()

df_emissions_by_continent_year = df_continents.groupby(['√Årea', 'Elemento', 'A√±o'])['Valor_Gt'].sum().reset_index()
df_emissions_by_continent_year.sort_values(by='Valor_Gt', ascending=False, inplace=True)

df_emissions_by_continent = df_continents.groupby(['√Årea'])['Valor_Gt'].sum().reset_index()
df_emissions_by_continent = df_emissions_by_continent.drop(df_emissions_by_continent[df_emissions_by_continent['√Årea'] == 'Mundo'].index)

st.subheader("Primeras filas del DataFrame de emisiones por continente")
st.dataframe(df_emissions_by_continent.head())



# Crear paleta
palette = sns.color_palette('Set2', len(continents))

# Copiar datos para graficar
df_plot = df_emissions_by_continent_year.copy()

# Estilo y figura
sns.set_style("whitegrid")
fig, (ax_line, ax_pie) = plt.subplots(1, 2, figsize=(14, 5),
                                      gridspec_kw={"width_ratios":[2, 1]})

# Gr√°fico de l√≠neas por continente
for idx, cont in enumerate(continents):
    sub = df_plot[df_plot['√Årea'] == cont].sort_values('A√±o')
    ax_line.plot(sub['A√±o'], sub['Valor_Gt'], marker='o', linewidth=1.4,
                 label=cont, color=palette[idx])

ax_line.set_title('CO‚ÇÇ-eq (AR5) ‚Äî serie temporal')
ax_line.set_ylabel('Gt CO‚ÇÇ-eq')
ax_line.set_xlabel('')
ax_line.grid(ls='--', alpha=.4)
ax_line.legend(title='Continente', ncol=3, fontsize=8)

# Gr√°fico de torta
ax_pie.pie(df_emissions_by_continent['Valor_Gt'],
           labels=df_emissions_by_continent['√Årea'],
           autopct='%1.1f%%',
           startangle=90,
           colors=palette)
ax_pie.set_title('Porcentaje de emisiones (CO‚ÇÇeq AR5) por continente')
ax_pie.axis('equal')

# T√≠tulo general
plt.suptitle('Emisiones Totales incluyendo LULUCF ‚Äî CO‚ÇÇ-eq 1990 - 2022',
             fontsize=14, y=1.03)
plt.tight_layout()

# ‚úÖ Mostrar en Streamlit
st.pyplot(fig)


st.markdown("""
### üß† Interpretaci√≥n y conclusiones del gr√°fico

**Interpretaci√≥n:**

En el gr√°fico de la izquierda, podemos observar c√≥mo fueron evolucionando las emisiones totales de **CO‚ÇÇeq (AR5)** en cada continente desde **1990 a 2022**.  
Cada l√≠nea representa las emisiones en gigatoneladas por continente.  
En el gr√°fico de torta, se visualiza el **aporte proporcional de cada continente** a la suma total de emisiones de CO‚ÇÇeq (AR5) en el mismo per√≠odo.

---

**Conclusiones:**

- **üåè Asia**  
  - Aporta el **46%** del total mundial y contin√∫a en crecimiento.  
  - Su curva crece de forma continua, pasando de **10 Gt en 1990 a 30 Gt en 2022**.

- **üåé Am√©rica**  
  - Aporta el **26%** del total mundial.  
  - Presenta un ligero crecimiento hasta 2005 (~12 Gt), luego una meseta, y a partir de 2010, un descenso.

- **üåç Europa**  
  - Muestra una **disminuci√≥n sostenida** desde 1990 hasta la actualidad.

- **üåç √Åfrica**  
  - Representa el **9%** del total de emisiones.  
  - Tiene un crecimiento sostenido de aproximadamente **3 Gt a 5 Gt** (un aumento del 60%).  
  - Sin embargo, la aceleraci√≥n es mucho menor comparada con Asia.

- **üåè Ocean√≠a**  
  - Es el continente con **menos emisiones**.  
  - Su l√≠nea permanece pr√°cticamente **plana** desde 1990 hasta hoy.

---

üìå **Resumen general:**  
**Asia y Am√©rica representan el 72%** del total de emisiones desde 1990 a 2022.  
**Europa** mantiene una tendencia de **reducci√≥n constante** en sus emisiones.
""")


df_covid = df_fao[
    (df_fao['√Årea'].isin(continents)) &
    (df_fao['A√±o'].between('2017', '2022')) &
    (df_fao['Elemento'] == 'Emisiones (CO2eq) (AR5)') &
    (df_fao['Producto'].isin(['Emisiones totales incluyendo LULUCF',
                              'Pre y\xa0post-producci√≥n',
                              'Farm gate',
                              'Cambios de uso de la tierra']))
].copy()

df_pct = (
    df_covid
    .groupby(['√Årea','Producto','A√±o'])['Valor_Mt'].sum()
    .unstack('A√±o')
    .pipe(lambda d: d.pct_change(axis=1)*100)
    [['2019','2020', '2021','2022']]            # columnas de inter√©s
    .reset_index()
)
# T√≠tulo y descripci√≥n
st.subheader("Variaci√≥n porcentual anual de emisiones CO‚ÇÇeq (AR5)")
st.caption("Comparaci√≥n a√±o a a√±o (2019-2022) por continente y tipo de producto.")

# Asegurarse que los nombres de columnas num√©ricas sean strings
df_pct.columns = [str(col.year) if isinstance(col, pd.Timestamp) else str(col) for col in df_pct.columns]

# Detectar columnas num√©ricas por su nombre (a√±os en string)
cols_numericas = [col for col in df_pct.columns if col.isdigit()]

# Estilo zebra + formato num√©rico
styled_df = (
    df_pct.style
    .format({col: "{:.2f}" for col in cols_numericas})
    .set_properties(**{'background-color': '#f9f9f9'}, subset=pd.IndexSlice[::2, :])
)

st.dataframe(styled_df, use_container_width=True)

st.subheader("Distribuci√≥n porcentual anual de emisiones por continente.")

world = df_emissions_by_continent_year[df_emissions_by_continent_year['√Årea'] == 'Mundo']
conts = df_emissions_by_continent_year[df_emissions_by_continent_year['√Årea'] != 'Mundo']
df_share = conts.merge(world, on='A√±o', suffixes=('_cont', '_world'))
df_share['share'] = df_share['Valor_Gt_cont'] / df_share['Valor_Gt_world'] * 100
pivot = (
    df_share.pivot(index='A√±o', columns='√Årea_cont', values='share')
            .loc[:, ['Asia','Am√©ricas','Europa','√Åfrica','Ocean√≠a']]
            .fillna(0)
)

# Saca las horas, minutos y segundo, s√≥lo deja el a√±o
pivot = pivot.rename_axis('A√±o').reset_index()
pivot['A√±o'] = pivot['A√±o'].dt.year
pivot.set_index('A√±o', inplace=True)


# Estilo y paleta
sns.set_style('whitegrid')
palette = sns.color_palette('Set2', len(pivot.columns))

# Crear figura y eje
fig, ax = plt.subplots(figsize=(12, 6))

# Gr√°fico de barras apiladas
pivot.plot(kind='bar', stacked=True, color=palette, width=0.9, ax=ax)

# T√≠tulos y formato
ax.set_title('Distribuci√≥n porcentual de emisiones agroalimentarias por continente (1990-2025)')
ax.set_ylabel('% del total global')
ax.set_xlabel('A√±o')
ax.set_ylim(0, 100)
ax.legend(title='Continente', bbox_to_anchor=(1.02, 1), loc='upper left', fontsize=8)
plt.tight_layout()

# Mostrar en Streamlit
st.pyplot(fig)

# Texto interpretativo
st.markdown("""
### Interpretaci√≥n:
- Cada barra del gr√°fico representa el **100‚ÄØ% del total global de emisiones**. Los colores muestran el porcentaje que ocupa cada continente en ese a√±o.

### Conclusiones:
- **Asia**: pasa de representar un 30‚ÄØ% en 1990 a aproximadamente un 55‚ÄØ% en la actualidad.
- **Am√©rica**: mantiene aproximadamente un 30‚ÄØ% en toda la d√©cada del 90, luego cae al 23‚ÄØ% en 2010 y se estabiliza.
- **Europa**: pasa de 29‚ÄØ% en 1990 a menos del 15‚ÄØ% en 2022. La franja azul confirma la eficacia de sus pol√≠ticas contra la emisi√≥n de gases de efecto invernadero.
- **√Åfrica**: crece muy lentamente, del 8‚ÄØ% al 9‚ÄØ%.
- **Ocean√≠a**: en 32 a√±os (1990 - 2022) nunca super√≥ el 2‚ÄØ%.

Como se puede observar en el gr√°fico, **el eje de las emisiones se desplaz√≥ del Atl√°ntico (Europa - Am√©rica) al √çndico - Pac√≠fico**.  
**Asia es hoy el principal emisor absoluto y relativo. Adem√°s, es el motor del crecimiento de las emisiones a nivel global.**
""")

df_dec = df_emissions_by_continent_year.copy()

# Convertir 'A√±o' a datetime si no lo est√°
if not pd.api.types.is_datetime64_any_dtype(df_dec['A√±o']):
    df_dec['A√±o'] = pd.to_datetime(df_dec['A√±o'], errors='coerce')

# Extraer d√©cada como n√∫mero
df_dec['D√©cada'] = df_dec['A√±o'].dt.year // 10 * 10

# Excluir 'Mundo'
df_dec = df_dec[df_dec['√Årea'] != 'Mundo']

# Agrupar
pivot_dec = (
    df_dec.groupby(['D√©cada','√Årea'])['Valor_Gt']
          .mean()
          .reset_index()
)

# Estilo
sns.set_style('whitegrid')
fig, ax = plt.subplots(figsize=(10, 5))

sns.barplot(data=pivot_dec,
            x='D√©cada', y='Valor_Gt', hue='√Årea', palette='Set2', ax=ax)

ax.set_title('Promedio anual de CO‚ÇÇ-eq por d√©cada y continente')
ax.set_ylabel('Gt CO‚ÇÇ-eq')
ax.set_xlabel('D√©cada')
ax.legend(title='Continente', bbox_to_anchor=(1.02, 1), loc='upper left', fontsize=8)

plt.tight_layout()
st.pyplot(fig)
st.markdown("""Interpretaci√≥n:
- D√©cada del 90: el mapa de las emisiones est√° muy distribuido, no se observa una dominancia marcada por alg√∫n continente.
- D√©cada del 2000: Asia despega, aumenta el promedio anual en un 45% respecto a la d√©cada anterior (del 12 Gt a 18 Gt). Adem√°s, Am√©rica aumenta un 10% y Europa tiene una ca√≠da del 15%. Comienza el cambio a nivel mundial del mapa de emisiones, las mismas se trasladan hac√≠a el pac√≠fico.
- Decada del 2010: Asia acelera nuevamente aumentando otro 45% (de 18gt a 26gt) el promedio anual en la d√©cada. En esta d√©cada Asia tiene un promedio mayor al doble que Am√©rica. Europa contin√∫a con su descenso y √Åfrica aumenta su promedio en un 25% respecto a la d√©cada anterior.
- D√©cada del 2020: el promedio anual de Asia se ubica cerca de las 30Gt, triplicando a Am√©rica. Europa se estabiliza y Ocean√≠a mantiene su promedio anual < 1 Gt, al igual que en d√©cadas anteriores.""")

st.subheader("Comparativa de Emisiones por Continente y por componente (1990 - 2010 - 2022)")
st.markdown("""Para este an√°lisis se seleccionaron los siguientes componentes:

- Farm Gate: fermentaci√≥n ent√©rica, gesti√≥n de esti√©rcol, fertilizantes sint√©ticos, uso de energ√≠a en la finca, etc.
Es decir, es todo lo que ocurre dentro del establecimiento agropecuario.
- Cambios en el uso de la tierra: deforestaci√≥n, conversi√≥n neta de bosques, drenaje de suelos org√°nicos, incendios, etc.
- Pre y post-producci√≥n: procesado, envasado, transporte, venta y desperdicio de alimentos. Todo lo que sucede antes y despu√©s de la puerta de la finca

Estos componentes agrupados representan las Emisiones Totales incluyendo LULUCF. Al analizarlos por separado, podemos definir con precisi√≥n qu√©‚ÄØporci√≥n de las emisiones proviene de la finca, de la conversi√≥n de ecosistemas o de la cadena de suministro, lo cual es informaci√≥n importante para definir politicas eficaces en cada regi√≥n.
""")



# ---------- CONVERSI√ìN DE DATOS ----------
df_fao['A√±o'] = pd.to_datetime(df_fao['A√±o'], errors='coerce').dt.year
df_fao['Elemento'] = df_fao['Elemento'].astype(str)

# ---------- PAR√ÅMETROS ----------
regions = ['Am√©ricas', 'Asia', 'Europa', 'Ocean√≠a', '√Åfrica']
products = ["Farm gate", "Cambios de uso de la tierra", "Pre y\xa0post-producci√≥n"]
gas = "CO2eq"
years = [1990, 2010, 2022]

# ---------- FILTRADO ----------
df_products_continents = df_fao[
    df_fao['Producto'].isin(products) &
    df_fao['√Årea'].isin(regions) &
    df_fao['A√±o'].isin(years) &
    df_fao['Elemento'].str.contains(gas, case=False, na=False)
].copy()

# ---------- PIVOTEO ----------
pivot = (
    df_products_continents
    .pivot_table(index=['A√±o', '√Årea'],
                 columns='Producto',
                 values='Valor_Gt',
                 aggfunc='sum')
    .sort_index(level=1)
    .reset_index()
    .sort_values(['√Årea', 'A√±o'], ascending=[True, False])
    .reset_index(drop=True)
)

if pivot.empty:
    st.warning("No hay datos disponibles con los filtros actuales.")
else:
    colors = ['#0066CC', '#0eca1c', '#ff5733']
    bar_h = 0.8
    gap = 1
    offset = bar_h
    n_y = len(years)
    y_pos = []
    for g in range(len(regions)):
        base = offset + g*(n_y*bar_h + gap)
        y_pos.extend(base + np.arange(n_y)*bar_h)

    fig, ax = plt.subplots(figsize=(10, 7))
    left = np.zeros(len(y_pos))

    for (col, color) in zip(products, colors):
        if col in pivot.columns:
            ax.barh(y_pos, pivot[col], left=left,
                    height=bar_h, color=color, edgecolor='white', label=col)
            left += pivot[col].fillna(0).values
        else:
            st.warning(f"'{col}' no est√° presente en los datos filtrados.")

    ax.set_yticks(y_pos)
    ax.set_yticklabels(pivot['A√±o'])
    ax.set_axisbelow(True)
    ax.grid(axis='y')

    ax2 = ax.twinx()
    mid_pos = [offset*0.1 + g*(n_y*bar_h + gap) + (n_y*bar_h) - bar_h
               for g in range(len(regions))]
    ax2.set_yticks(mid_pos)
    ax2.set_yticklabels(regions, fontsize=15, weight='bold')

    ax2.yaxis.set_ticks_position('left')
    ax2.spines['left'].set_position(('outward', 70))
    ax2.tick_params(axis='y', length=0)
    ax.spines['left'].set_visible(False)
    ax2.spines['right'].set_visible(False)
    ax2.grid(False)

    ax.set_xlabel('Gt CO‚ÇÇ-eq (AR5)')
    ax.set_title('Total Emisiones incluyendo LULUCF CO‚ÇÇ-eq por componente 1990 ¬∑ 2010 ¬∑ 2022')
    ax.legend(title='Producto',
              loc='upper right',
              frameon=True,
              framealpha=.9,
              borderpad=.6, fontsize=9)
    plt.tight_layout()
    st.pyplot(fig)

st.markdown("""
---

### üßæ Interpretaci√≥n del gr√°fico

El gr√°fico muestra barras horizontales apiladas que cuantifican las emisiones agro-alimentarias de CO‚ÇÇ-equivalente (Gt CO‚ÇÇ-eq) para cada continente en tres cortes temporales: **1990**, **2010** y **2022**.

#### üîç Interpretaci√≥n por continente:

- **Asia**:
  - En 1990, las emisiones a causa de *Farm gate* son la porci√≥n m√°s grande.
  - Para 2022, el bloque rojo (*pre-/post-producci√≥n*) crece con rapidez (aumenta √ó‚ÄØ7 en 32‚ÄØa√±os), reflejando la industrializaci√≥n de la cadena alimentaria asi√°tica y el aumento del consumo urbano.
  - Las emisiones por *cambios en el uso de la tierra* se reducen moderadamente tras 2010 gracias al freno parcial de la deforestaci√≥n en el Sudeste Asi√°tico.

- **Am√©ricas**:
  - En 1990 se observa una dominancia de las emisiones por *cambios en el uso de la tierra*.
  - Para el a√±o 2022, el bloque verde disminuye notablemente, mientras las emisiones por *pre y post-producci√≥n* se multiplican. Esto significa que hubo una transici√≥n de deforestaci√≥n a cadena de suministro.
  - Al mismo tiempo, azul se mantiene estable y rojo se multiplica. Significa que la presi√≥n clim√°tica migra de la frontera agropecuaria hacia la log√≠stica y el consumo.

- **Europa**:
  - Desde 1990 a la actualidad, las emisiones por *cambios en el uso de la tierra* fueron marginales.
  - Se observa una disminuci√≥n de las emisiones por *farm gate* desde 1990 a 2010 y luego se mantienen estables hasta 2022.
  - El bloque rojo demuestra que la mayor parte del problema europeo reside hoy en las emisiones por *pre y post-producci√≥n*.

- **√Åfrica**:
  - Las emisiones por *farm gate* ganan peso d√©cada tras d√©cada.
  - En 1990, las emisiones por *cambios en el uso de la tierra* dominan con amplia ventaja.
  - En 2010, las emisiones por *farm gate* recortan distancia.
  - En 2022, el componente ligado a deforestaci√≥n e incendios sigue siendo la principal fuente de emisiones. Adem√°s, la franja roja (*pre y post-producci√≥n*) muestra que la cadena de valor ‚Äîprocesado, transporte, venta‚Äî est√° comenzando a pesar y puede acelerarse.

- **Ocean√≠a**: emisiones muy bajas y estables.

---

### üß† Conclusi√≥n

El problema clim√°tico del sistema agro‚Äëalimentario mundial se ha desplazado del **‚Äúd√≥nde sembramos‚Äù** (*deforestaci√≥n*) al **‚Äúc√≥mo producimos y consumimos‚Äù** (*industria y consumo*).

Las estrategias para reducir las emisiones de gases deben, por tanto, abarcar la **cadena completa**, con prioridades distintas seg√∫n la fase en que se encuentre cada regi√≥n.
""")

st.subheader("Top 10 Paises con mayores Emisiones (CO2eq) (AR5) (2022)")
st.markdown("""Para este an√°lisis se seleccion√≥ el elemento Emisiones (CO2eq) (AR5), ya que:
- Es una m√©trica que convierte todas las emisiones de gases de efecto invernadero (GEI) ‚Äîcomo di√≥xido de carbono (CO‚ÇÇ), metano (CH‚ÇÑ) y √≥xido nitroso (N‚ÇÇO)‚Äî en toneladas equivalentes de CO‚ÇÇ.
- Permite realizar an√°lisis agregados, consistentes y comparables entre pa√≠ses

""")
gas = 'Emisiones (CO2eq) (AR5)'
product_code = 6825 # Emisiones Totales incluyendo LULUCF

df_countries_2022 = df_fao[
    (~df_fao['√Årea'].isin(regiones)) &
    (df_fao['C√≥digo del producto'] == product_code) &
    (df_fao['Elemento'] == gas) &
    (df_fao['A√±o'] == 2022)
    ]

df_top_countries_emission = df_countries_2022.groupby(['√Årea'])['Valor'].sum().reset_index()
df_top_countries_emission.sort_values(by= 'Valor',ascending=False, inplace=True)
df_top_countries_emission = df_top_countries_emission.head(10)
df_top_countries_emission

total_global = df_fao[
    (df_fao['Elemento'] == 'Emisiones (CO2eq) (AR5)') &
    (df_fao['√Årea'] == 'Mundo') &
     (df_fao['A√±o'] == 2022) &
    (df_fao['C√≥digo del producto'] == product_code)
    ]['Valor'].sum()
total_top_10 = df_top_countries_emission['Valor'].sum()

pct_top_10 = (total_top_10 / total_global) * 100
pct_rest = 100 - pct_top_10

st.markdown(f"## **Top 10 pa√≠ses** representan el **{pct_top_10:.1f}%** del total global.")
st.markdown(f"## **Resto del mundo** representa el **{pct_rest:.1f}%**.")

# Espaciado visual
st.write("")  # una l√≠nea en blanco
st.write("")  # otra si se quiere m√°s espacio

fix = {
    "Estados Unidos de Am√©rica": "EEUU",
    "Ir√°n (Rep√∫blica Isl√°mica del)": 'Ir√°n',
    "Federaci√≥n de Rusia": "Rusia"
}
df_top_countries_emission['√Årea'] = df_top_countries_emission['√Årea'].replace(fix)

# Crear figura y subplots
fig, axs = plt.subplots(1, 2, figsize=(14, 6),gridspec_kw={'width_ratios': [1.2, 1]})

# --- Subplot 1: Gr√°fico de barras ---
sns.barplot(data=df_top_countries_emission,x='√Årea', y='Valor', hue='√Årea',
            palette='Greens_r', ax=axs[0], legend=False)
axs[0].set_title(' Total Emisiones (CO2eq) (AR5)', fontsize=13)
axs[0].set_xlabel('Pa√≠s')
axs[0].set_ylabel('Emisiones Totales (kilotones)')
axs[0].tick_params(axis='x', rotation=45)

# --- Subplot 2: Gr√°fico de torta ---
labels = [f'Top 10 pa√≠ses ({pct_top_10:.1f}%)', f'Resto del mundo ({pct_rest:.1f}%)']
values = [pct_top_10, pct_rest]

axs[1].pie(
    x=values,
    labels=labels,
    colors=sns.color_palette('Greens_r', len(labels)),
    startangle=140,
    autopct=lambda p: f'{p:.1f}%'
)
axs[1].set_title('Participaci√≥n del Top 10 pa√≠ses emisores sobre el total global', fontsize=13)

fig.suptitle('Top 10 Paises Emisiones (CO2eq) (AR5) (2022)', fontsize=16, y=1.05)
st.pyplot(fig)
st.markdown("""Interpretaci√≥n:

- China	Con aproximadamente 14‚ÄØmillones de kt lidera con enorme ventaja (‚ÄØ2,5‚ÄØ√ó EEUU).
- EE.‚ÄØUU: es el segundo pa√≠s con mas emisiones en el mundo pero, aun as√≠ emite menos de la mitad que China.
- India: se consolida en el tercer lugar, reflejando crecimiento poblacional.
- Rusia, Indonesia, Brasil, Jap√≥n, Ir√°n: tienen valores intermedios (0,6‚ÄØ‚Äì‚ÄØ2‚ÄØmillones‚ÄØkt). Mezcla de grandes potencias agr√≠colas (Brasil, Indonesia) y econom√≠as industriales/energ√©ticas (Rusia, Ir√°n, Jap√≥n).
- Arabia‚ÄØSaudita y M√©xico	ocupan el puesto 9 y 10 el ranking. Sus emisiones son <10‚ÄØ% de las chinas.

Se puede observar una desigualdad extrema: el primer pa√≠s (China) emite casi 75 veces m√°s que el d√©cimo.

Adem√°s, en el gr√°fico de la derecha podemos observar que, en la actualidad, dos tercios de todas las emisiones agro‚Äëalimentarias se concentran en solo diez pa√≠ses (63%). Por lo tanto, el resto de los paises (180 aprox) aportan el otro tercio.
El gr√°fico demuestra que las politicas de mitigaci√≥n global deben hacer foco en unas pocas jurisdicciones. Sin acciones contundentes en esos pa√≠ses, el resto del mundo dif√≠cilmente compensar√° el volumen de emisiones que ah√≠ se genera.""")


st.subheader("Am√©rica (Actualidad)")
anio = 2022
countries = ['Estados Unidos de Am√©rica', 'Brasil', 'Argentina', 'M√©xico', 'Colombia', 'Canad√°', 'Per√∫']
product_code = 6825 # Emisiones totales incluyendo LULUCF
gas = 'Emisiones (CO2eq) (AR5)'

df_most_population_america = df_fao[
    (df_fao['√Årea'].isin(countries)) &
    (df_fao['A√±o'] == anio) &
    (df_fao['Elemento'] == gas) &
    (df_fao['C√≥digo del producto'] == product_code)]

df_top_countries_emission = df_most_population_america.groupby(['√Årea'])['Valor_Mt'].sum().reset_index()
df_top_countries_emission.sort_values(by= 'Valor_Mt',ascending=False, inplace=True)

total_america = df_fao[
    (df_fao['√Årea'] == 'Am√©ricas') &
    (df_fao['A√±o'] == anio) &
     (df_fao['Elemento'] == gas) &
    (df_fao['C√≥digo del producto'] == product_code)
    ]['Valor_Mt'].sum()

rest_of_america = total_america - df_top_countries_emission['Valor_Mt'].sum()
st.write("")
st.write("")
st.markdown(f"### **Resto de Am√©rica** representa  **{rest_of_america:.1f}%**.")
st.write("")
st.write("")


df_plot = (pd.concat(
    [df_top_countries_emission ,
     pd.DataFrame({'√Årea': ['Resto de Am√©rica'], 'Valor_Mt': [rest_of_america]})
     ], ignore_index=True)
)

df_plot['Share'] = (df_plot['Valor_Mt'] / df_plot['Valor_Mt'].sum()) * 100
df_plot.sort_values('Valor_Mt', ascending=False, inplace=True)

sns.set_style('whitegrid')
plt.figure(figsize=(12,6))
sns.barplot(data=df_plot, y='√Årea', x='Share', hue='√Årea',
            palette='Greens_r', edgecolor='black')

for i, row in df_plot.iterrows():
    plt.text(row['Share']+5, i,
             f"{row['Valor_Mt']:,.0f} Mt", va='center')

plt.title(f'Emisiones Totales incluyendo LULUCF CO‚ÇÇ-eq en Am√©rica ({anio})')
plt.xlabel('% del total continental'); plt.ylabel('')
plt.xlim(0, 100)
plt.tight_layout(); st.pyplot(plt)

st.write("")
st.write("")
st.markdown("""### An√°lisis por Tipo de Gas y Continente""")

gases = ['Emisiones (CO2)', 'Emisiones (N2O)', 'Emisiones (CH4)']

df_continents_gas = df_fao[
    (df_fao['√Årea'].isin(continents)) &
    (df_fao['Elemento'].isin(gases)) &
    (df_fao['Producto'] == 'Emisiones totales incluyendo LULUCF')
    ].copy()

df_continents_gas_by_year = df_continents_gas.groupby(['√Årea', 'Elemento', 'A√±o'])['Valor_Mt'].sum().reset_index()
df_continents_gas_by_year = df_continents_gas_by_year[df_continents_gas_by_year['√Årea'] != 'Mundo']
df_continents_gas_by_year.sort_values(by='Valor_Mt', ascending=False, inplace=True)

fig, axs = plt.subplots(1, 3, figsize=(18, 6), sharey=False)
axs = axs.ravel()

palette = sns.color_palette('Set2', len(continents) - 1)

# Dibujar cada gas en un eje
for i, gas in enumerate(gases):
    ax = axs[i]
    sns.lineplot(data=df_continents_gas_by_year[df_continents_gas_by_year['Elemento'] == gas],
                 x='A√±o', y='Valor_Mt', hue='√Årea',
                 marker='o', palette=palette, ax=ax)

    ax.set_title(gas, fontsize=11)
    ax.set_xlabel('')
    ax.set_ylabel('Mt CO‚ÇÇ-eq')
    ax.grid(ls='--', alpha=.4)
    if i == 0:
        ax.set_ylabel('Mt CO‚ÇÇ-eq')
    else:
        ax.set_ylabel('')
fig.suptitle('Evoluci√≥n anual de emisiones por continente (1990-2022)',
             fontsize=15, weight='bold', y=0.96)
plt.tight_layout(rect=[0, 0, 1, 0.95])
st.pyplot(plt)

st.write("")
st.write("")

st.markdown("""Asia: es el motor del alza mundial de los tres gases. La pendiente apenas se modera a partir de 2015. Las emisiones de CO2 crecen de de 6 mil Mt a casi 23 mil Mt.

Am√©rica: las emisiones de CO2 crecen hasta 2005 y luego hay una meseta-descenso a 8000 mt. Las emisiones de NO2 tienen un crecimiento suave de 2 mil Mt a casi 3mil Mt. Mientras que las emisiones de CH4, se mantienen estables.

Europa: es el √∫nico continente donde se observa una ca√≠da en las emisiones de los tres gases.

√Åfrica: el salto porcentual es grande (sobretodo en CH4 y N2O), pero la magnitud absoluta sigue muy por debajo de Asia o Am√©rica. Las emisiones de CO2 crecen muy lentamente.

Ocean√≠a: impacto global muy bajo. Las variaciones anuales est√°n relacionadas a incendios o sequ√≠as.


Conclusiones generales:
- N2O es el gas con la pendiente proporcional m√°s alta en √Åfrica y Asia: es la l√≠nea que mas r√°pido crece en ambos continentes.
- CH4 presenta tendencia ascendente suave excepto en Europa que hay un descenso.
-CO‚ÇÇ es, con mucha diferencia, el gas dominante en todas las regiones.""")

st.markdown("""### An√°lisis de Productos Desagregados y su relaci√≥n con los diferentes tipos de Gas
Para este an√°lisis vamos a tener en cuenta los productos desagregados""")

gases = ['Emisiones (CO2)', 'Emisiones (N2O)', 'Emisiones (CH4)']
anio = 2022
codes_agg = [6518, 6516, 6517, 6996, 6995, 5084, 5085,
             6825, 6829, 6824, 67292, 67291, 69921, 6821, 6817, 6820, 1707, 1711]

df_non_agg_products = df_fao[
    (~df_fao['C√≥digo del producto'].isin(codes_agg)) &
    (df_fao['A√±o'] == anio) &
    (df_fao['Elemento'].isin(gases))
    ]

df_products_top_emissions = df_non_agg_products.groupby(['Producto', 'Elemento'])['Valor_Mt'].sum().reset_index()

top_n = 10
lista_top = []
for g in gases:
    top_g = (df_non_agg_products[df_non_agg_products['Elemento'] == g]
                .groupby('Producto')['Valor_Mt']
                .sum()
                .sort_values(ascending=False)
                .head(top_n)
                .reset_index())
    top_g['Gas'] = g
    lista_top.append(top_g)

df_top_gases = pd.concat(lista_top, ignore_index=True)

df_top_gases = (df_top_gases.set_index(['Gas','Producto'])
                              .sort_index(level='Gas'))

df_top_gases = df_top_gases.rename(
    index={'Eliminaci√≥n de desechos de sistemas agroalimentarios':
           'Eliminaci√≥n de desechos de S. Agro.'},
    level='Producto'
)

sns.set_style('whitegrid')
base_palette = sns.color_palette('Greens_r', top_n)
fig, axes = plt.subplots(3, 1, figsize=(10,10), sharex=False)

for ax, g in zip(axes, gases):
    sub = df_top_gases.loc[g].sort_values('Valor_Mt')
    colors = base_palette
    sub.plot.barh(ax=ax, color=colors, edgecolor='black')
    ax.set_title(f'{g.split()[1]}')
    ax.set_xlabel('Mt'); ax.set_ylabel('')
    ax.grid(axis='x', ls='--', alpha=.4)
    ax.get_legend().remove()

fig.suptitle('Top 10 Productos m√°s emisores por gas ‚Äì A√±o 2022', y=1.02, fontsize=13)
plt.tight_layout()
st.pyplot(plt)

years = [1990, 2022]
df_crec_prod = df_fao[
    (df_fao['A√±o'].isin(years)) &
    (df_fao['√Årea'] == 'Mundo') &
    (~df_fao['C√≥digo del producto'].isin(codes_agg)) &
    (df_fao['Elemento'] == 'Emisiones (CO2eq) (AR5)')
    ].copy()

totals_by_year = df_crec_prod.groupby(['A√±o', 'Producto'])['Valor_Mt'].sum().unstack('A√±o').reset_index()

st.markdown("### Evoluci√≥n de emisiones por producto (1990 vs 2022)")

totals_by_year["Crecimiento absoluto"] = totals_by_year[2022] - totals_by_year[1990]
totals_by_year = totals_by_year.sort_values("Crecimiento absoluto", ascending=False)
st.dataframe(totals_by_year, use_container_width=True)

st.markdown("# Modelo predictivo")

serie_america = df_cleaned[
    (df_cleaned['√Årea'] == 'Am√©ricas') &
    (df_cleaned['Elemento'] == 'Emisiones (CO2eq) (AR5)') &
    (df_cleaned['C√≥digo del producto'] == 6825)
    ]
serie_asia = df_cleaned[
    (df_cleaned['√Årea'] == 'Asia') &
    (df_cleaned['Elemento'] == 'Emisiones (CO2eq) (AR5)') &
    (df_cleaned['C√≥digo del producto'] == 6825)
    ]

serie_europa = df_cleaned[
    (df_cleaned['√Årea'] == 'Europa') &
    (df_cleaned['Elemento'] == 'Emisiones (CO2eq) (AR5)') &
    (df_cleaned['C√≥digo del producto'] == 6825)
    ]
serie_oceania = df_cleaned[
    (df_cleaned['√Årea'] == 'Oceania') &
    (df_cleaned['Elemento'] == 'Emisiones (CO2eq) (AR5)') &
    (df_cleaned['C√≥digo del producto'] == 6825)
    ]

serie_africa = df_cleaned[
    (df_cleaned['√Årea'] == '√Åfrica') &
    (df_cleaned['Elemento'] == 'Emisiones (CO2eq) (AR5)') &
    (df_cleaned['C√≥digo del producto'] == 6825)
    ]

st.markdown("### üìä Curva de emisiones en kilotoneladas a lo largo de los a√±os para los distintos continentes. "
            "Evoluci√≥n de las emisiones agroalimentarias en cada continente a lo largo del tiempo")

st.markdown("""
---
### Cada gr√°fico representa la evoluci√≥n de las **emisiones agroalimentarias totales** (en kilotoneladas de CO‚ÇÇ-eq, metodolog√≠a AR5) desde el a√±o 1990 hasta 2022 en cada continente. A continuaci√≥n se presentan algunas observaciones generales:

- **Am√©rica**:
  - Muestra una tendencia creciente con ciertas oscilaciones.
  - Se destacan picos asociados a deforestaci√≥n y uso intensivo de fertilizantes en d√©cadas recientes.

- **Asia**:
  - Presenta un **crecimiento sostenido y fuerte**.
  - La industrializaci√≥n y el aumento del consumo urbano explican buena parte del incremento.

- **Europa**:
  - Se observa una **tendencia a la estabilizaci√≥n o incluso leve reducci√≥n**.
  - Las pol√≠ticas ambientales y agr√≠colas parecen estar moderando las emisiones.

- **Ocean√≠a**:
  - Tiene niveles **bajos y relativamente estables**.
  - La menor poblaci√≥n y menor superficie cultivable influyen en estos valores.

- **√Åfrica**:
  - Las emisiones han crecido de forma progresiva.
  - El aumento se debe al avance de la frontera agropecuaria y la presi√≥n sobre ecosistemas.

---

### üß† Conclusi√≥n general

Estos gr√°ficos permiten **visualizar patrones hist√≥ricos** que sirven como base para aplicar modelos predictivos (por ejemplo, regresiones o modelos ARIMA) y anticipar el impacto futuro de las pol√≠ticas agr√≠colas y alimentarias en cada regi√≥n.
""")


fig, axes = plt.subplots(2, 3, figsize=(18, 10))
axes = axes.flatten()  # Aplanar para acceder con √≠ndice simple

sns.lineplot(data=serie_america, x='A√±o', y='Valor', ax=axes[0])
axes[0].set_title('Am√©rica')

sns.lineplot(data=serie_asia, x='A√±o', y='Valor', ax=axes[1])
axes[1].set_title('Asia')

sns.lineplot(data=serie_europa, x='A√±o', y='Valor', ax=axes[2])
axes[2].set_title('Europa')

sns.lineplot(data=serie_oceania, x='A√±o', y='Valor', ax=axes[3])
axes[3].set_title('Ocean√≠a')

sns.lineplot(data=serie_africa, x='A√±o', y='Valor', ax=axes[4])
axes[4].set_title('√Åfrica')

# Eliminar el sexto subplot (vac√≠o)
fig.delaxes(axes[5])

plt.tight_layout()
st.pyplot(plt)

st.markdown("""
---

### üîÑ Componente estacional de las emisiones por continente

Estos gr√°ficos muestran la **variaci√≥n estacional** de las emisiones agroalimentarias en cada continente, obtenida mediante un modelo de descomposici√≥n STL (Seasonal-Trend decomposition using Loess). A diferencia del gr√°fico anterior que muestra la tendencia global, este a√≠sla **los patrones c√≠clicos o repetitivos** presentes en las emisiones a lo largo del tiempo.

#### üß© ¬øQu√© representa la curva en cada gr√°fico?
- El eje X representa los a√±os.
- El eje Y representa la **fluctuaci√≥n estacional** de las emisiones (desvinculada de la tendencia general).
- Valores positivos o negativos indican cu√°nto se desv√≠a la serie por efecto estacional en distintos momentos.

#### üîç Observaciones clave:

- **Am√©rica y Asia** muestran oscilaciones c√≠clicas claras, lo que sugiere que hay factores repetitivos (como campa√±as agr√≠colas o pol√≠ticas energ√©ticas) que influyen peri√≥dicamente.
- **Europa** presenta una componente estacional m√°s tenue, reflejo de pol√≠ticas m√°s estables y menor variabilidad estructural.
- **√Åfrica y Ocean√≠a** tienen variaciones m√°s irregulares o menos pronunciadas, posiblemente asociadas a factores clim√°ticos o econ√≥micos puntuales.

---

### üìå Conclusi√≥n

El an√°lisis estacional es fundamental para detectar **patrones ocultos** que se repiten en el tiempo. Estos insights permiten afinar los modelos predictivos, entender la influencia del calendario agr√≠cola, y anticipar picos o ca√≠das sistem√°ticas en las emisiones.
""")


fig, axes = plt.subplots(2, 3, figsize=(18, 10))
axes = axes.flatten()

# Lista de series y t√≠tulos
series = [
    ('Am√©rica', serie_america['Valor']),
    ('Asia', serie_asia['Valor']),
    ('Europa', serie_europa['Valor']),
    ('Ocean√≠a', serie_oceania['Valor']),
    ('√Åfrica', serie_africa['Valor'])
]

# Graficar componente 'seasonal' de cada STL
for i, (titulo, serie) in enumerate(series):
    stl = STL(serie, period=5).fit()
    axes[i].plot(serie.index, stl.seasonal)
    axes[i].set_title(f'Tendencia - {titulo}')
    axes[i].set_xlabel('A√±o')
    axes[i].set_ylabel('Valor')

# Eliminar el subplot vac√≠o (el sexto)
fig.delaxes(axes[5])

plt.tight_layout()
st.pyplot(plt)

st.markdown("### üìä Proporci√≥n de varianza explicada por la estacionalidad")

# Lista de pares (nombre, serie)
series = [
    ('Am√©rica', serie_america['Valor']),
    ('Asia', serie_asia['Valor']),
    ('Europa', serie_europa['Valor']),
    ('Ocean√≠a', serie_oceania['Valor']),
    ('√Åfrica', serie_africa['Valor'])
]

# Calcular proporci√≥n varianza estacional / total
resultados = []
for nombre, serie in series:
    stl = STL(serie, period=5).fit()
    proporci√≥n = stl.seasonal.var() / serie.var()
    resultados.append((nombre, round(proporci√≥n, 3)))

# Mostrar en tabla
df_var = pd.DataFrame(resultados, columns=["Regi√≥n", "Var(seasonal) / Var(total)"])
st.dataframe(df_var, use_container_width=True)

st.markdown("""La varianza explicada por la componente estacional en todas las regiones se encuentra entre el **0.1% y el 2.8%** de la varianza total. Esto indica que **no existe un patr√≥n estacional fuerte** en ninguna de las series.

En particular:

- Asia, √Åfrica y Am√©rica muestran una **estacionalidad muy d√©bil** (‚â§ 1.5%).
- Europa, aunque algo mayor, tambi√©n se mantiene por debajo del 3%.
- En Ocean√≠a no se pudo calcular por falta de variabilidad o datos incompletos.

### üß† Conclusi√≥n:
Dado que la **contribuci√≥n estacional es insignificante**, tratamos las series como **no estacionales**, y podemos modelarlas directamente con un modelo **ARIMA convencional** (o un SARIMA con `s = 1`, que equivale a lo mismo). Solo es necesario diferenciar la serie para eliminar la tendencia.
""")

st.markdown("""### Pruebas de estacionaridad""")

st.markdown("### üìâ Test de Estacionariedad ADF por continente")

series_continentales = {
    'Am√©rica': serie_america['Valor'],
    'Asia': serie_asia['Valor'],
    'Europa': serie_europa['Valor'],
    'Ocean√≠a': serie_oceania['Valor'],
    '√Åfrica': serie_africa['Valor'],
}

# Para tabla resumen
resumen_adf = []

# Evaluar ADF
for nombre, serie in series_continentales.items():
    st.markdown(f"#### üåç {nombre}")
    serie_sin_na = serie.dropna()

    if len(serie_sin_na) < 3:
        st.warning("Serie vac√≠a o con muy pocos datos, se omite.")
        resumen_adf.append({
            "Regi√≥n": nombre,
            "ADF Statistic": "N/A",
            "p-value": "N/A",
            "Estacionaria": "No evaluada"
        })
        continue

    try:
        result = adfuller(serie_sin_na)
        adf_stat = result[0]
        p_value = result[1]
        critical_values = result[4]

        st.markdown(f"- **ADF Statistic**: `{adf_stat:.4f}`")
        st.markdown(f"- **p-value**: `{p_value:.4f}`")
        st.markdown("- **Valores cr√≠ticos:**")
        for key, value in critical_values.items():
            st.markdown(f"  - {key}: `{value:.4f}`")

        if p_value < 0.05:
            st.success("‚úÖ La serie **es estacionaria** (se rechaza H0)")
            conclusion = "‚úÖ S√≠"
        else:
            st.error("üö´ La serie **NO es estacionaria** (no se rechaza H0)")
            conclusion = "üö´ No"

        resumen_adf.append({
            "Regi√≥n": nombre,
            "ADF Statistic": round(adf_stat, 4),
            "p-value": round(p_value, 4),
            "Estacionaria": conclusion
        })

    except Exception as e:
        st.error(f"‚ö†Ô∏è Error al procesar la serie: {e}")
        resumen_adf.append({
            "Regi√≥n": nombre,
            "ADF Statistic": "Error",
            "p-value": "Error",
            "Estacionaria": "Error"
        })

# Mostrar tabla resumen
st.markdown("### üìã Resumen del test ADF")
df_resumen_adf = pd.DataFrame(resumen_adf)
st.dataframe(df_resumen_adf, use_container_width=True)

st.write("")
st.write("")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Supongamos que estas series ya est√°n definidas ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Asegurate de definirlas antes de correr esta app
series_continentales = {
    'Am√©rica': serie_america['Valor'],
    'Asia': serie_asia['Valor'],
    'Europa': serie_europa['Valor'],
    'Ocean√≠a': serie_oceania['Valor'],
    '√Åfrica': serie_africa['Valor'],
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Interfaz ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.title("Test KPSS de Estacionaridad")
st.write("An√°lisis de estacionaridad con regresi√≥n lineal y t√©rmino constante")

alpha = 0.05  # Nivel de significancia

# Bot√≥n para iniciar an√°lisis
if st.button("Ejecutar test KPSS"):
    for nombre, serie in series_continentales.items():
        st.subheader(f"{nombre}")
        serie = serie.dropna()

        if len(serie) < 3:
            st.info("Serie vac√≠a o muy corta, se omite.")
            continue

        try:
            stat, p, lags, crit = kpss(serie, regression='ct')
            st.write(f"**KPSS stat** = {stat:.3f} | **p** = {p:.3f} | **lags** = {lags}")
            if p < alpha:
                st.error("**NO estacionaria** (se rechaza H‚ÇÄ)")
            else:
                st.success("Sin evidencia contra la estacionaridad (no se rechaza H‚ÇÄ)")
        except Exception as e:
            st.warning(f"Error al procesar {nombre}: {e}")

st.markdown("""### Resultados de las Pruebas de Estacionariedad:

- Am√©rica: tanto la prueba ADF como KPSS coinciden en que la serie no es estacionaria. Tratamiento: vamos a realizar una diferenciaci√≥n (d = 1).
- Asia: existe un conflicto leve entre las pruebas. ADF rechaza la estacionariedad, mientras KPSS no la rechaza. Tratamiento: vamos a partir de una primera diferenciaci√≥n y hacer pruebas.
- Europa: conflicto. KPSS indica que no hay estacionariedad mientras ADF rechaza la H0, indicando lo contrario. Tratamiento: vamos a hacer pruebas luego de una primera diferenciaci√≥n.
- Ocean√≠a: las pruebas se contradicen. Tratamiento: d = 1.
- √Åfrica: ADF concluye que la serie no es estacionaria y KPSS no tiene evidencia contra la estacionariedad. Tratamiento: primera diferenciaci√≥n.""")

st.markdown("### üîç Estacionariedad y diferenciaci√≥n para modelado ARIMA")

series_continentales = {
    'Am√©rica': serie_america,
    'Asia': serie_asia,
    'Europa': serie_europa,
    'Ocean√≠a': serie_oceania,
    '√Åfrica': serie_africa,
}


def test_adf(serie):
    result = adfuller(serie.dropna())
    adf_stat, p_value, _, _, critical_values, _ = result
    return adf_stat, p_value, critical_values


# Resultados para tabla
resultados_adf = []

for nombre, df in series_continentales.items():
    st.markdown(f"#### üåé {nombre}")

    if 'Valor' not in df or df['Valor'].dropna().size < 3:
        st.warning("‚ö†Ô∏è Serie vac√≠a o con muy pocos datos.")
        resultados_adf.append({
            "Regi√≥n": nombre,
            "ADF original": "‚Äì",
            "p-value original": "‚Äì",
            "Estacionaria original": "No evaluada",
            "ADF diferenciada": "‚Äì",
            "p-value diferenciada": "‚Äì",
            "Estacionaria diferenciada": "No evaluada",
            "Diferencias necesarias (d)": "‚Äì"
        })
        continue

    serie = df['Valor'].dropna()

    # ADF original
    adf_stat_orig, pval_orig, _ = test_adf(serie)
    estacionaria_orig = "S√≠" if pval_orig < 0.05 else "No"

    st.markdown(f"- ADF original: `{adf_stat_orig:.4f}`, p-value: `{pval_orig:.4f}`")
    st.markdown(f"‚Üí ¬øEs estacionaria? **{'‚úÖ S√≠' if pval_orig < 0.05 else 'üö´ No'}**")

    # Si es estacionaria, no se diferencia
    if pval_orig < 0.05:
        resultados_adf.append({
            "Regi√≥n": nombre,
            "ADF original": round(adf_stat_orig, 4),
            "p-value original": round(pval_orig, 4),
            "Estacionaria original": "S√≠",
            "ADF diferenciada": "‚Äì",
            "p-value diferenciada": "‚Äì",
            "Estacionaria diferenciada": "‚Äì",
            "Diferencias necesarias (d)": 0
        })
        continue

    # Diferenciar y volver a testear
    df['Valor_diff'] = df['Valor'].diff()
    serie_diff = df['Valor_diff'].dropna()

    if serie_diff.size < 3:
        st.warning("‚ö†Ô∏è No hay suficientes datos tras diferenciar.")
        resultados_adf.append({
            "Regi√≥n": nombre,
            "ADF original": round(adf_stat_orig, 4),
            "p-value original": round(pval_orig, 4),
            "Estacionaria original": "No",
            "ADF diferenciada": "‚Äì",
            "p-value diferenciada": "‚Äì",
            "Estacionaria diferenciada": "No evaluada",
            "Diferencias necesarias (d)": "?"
        })
        continue

    adf_stat_diff, pval_diff, _ = test_adf(serie_diff)
    estacionaria_diff = "S√≠" if pval_diff < 0.05 else "No"

    st.markdown(f"- ADF diferenciada: `{adf_stat_diff:.4f}`, p-value: `{pval_diff:.4f}`")
    st.markdown(f"‚Üí ¬øEs estacionaria tras diferenciar? **{'‚úÖ S√≠' if pval_diff < 0.05 else 'üö´ No'}**")

    resultados_adf.append({
        "Regi√≥n": nombre,
        "ADF original": round(adf_stat_orig, 4),
        "p-value original": round(pval_orig, 4),
        "Estacionaria original": "No",
        "ADF diferenciada": round(adf_stat_diff, 4),
        "p-value diferenciada": round(pval_diff, 4),
        "Estacionaria diferenciada": estacionaria_diff,
        "Diferencias necesarias (d)": 1 if pval_diff < 0.05 else "‚â•2"
    })

# Mostrar tabla resumen
st.markdown("### üìã Resumen de diferenciaci√≥n requerida para ARIMA")
df_adf_resumen = pd.DataFrame(resultados_adf)
st.dataframe(df_adf_resumen, use_container_width=True)

st.markdown("""
---

### üß† ¬øPor qu√© se realiza esta prueba?

Antes de aplicar un modelo ARIMA, es necesario trabajar con series **estacionarias**, es decir, series cuya media y varianza se mantienen constantes en el tiempo.

El **test de Dickey-Fuller aumentado (ADF)** permite verificar si una serie:

- üîπ **Ya es estacionaria** ‚Üí se puede modelar directamente (ARIMA con `d = 0`).
- üîπ **No es estacionaria** ‚Üí requiere ser **diferenciada** (restar cada valor con el anterior) para eliminar tendencia.

---

### ‚öôÔ∏è ¬øQu√© significa diferenciar una serie?

Diferenciar una serie es transformar los valores absolutos en **cambios entre periodos consecutivos**. Esto permite:

- Eliminar la tendencia creciente o decreciente.
- Hacer que la serie fluct√∫e alrededor de una media constante.
- Lograr que el test ADF detecte estacionariedad en la nueva serie.

---

### üìå Conclusi√≥n

Con esta prueba determinamos el par√°metro `d` que cada serie necesita en el modelo ARIMA.  
Si una serie no se vuelve estacionaria ni con la primera diferencia (`d = 1`), puede requerir transformaciones adicionales (`d ‚â• 2`) o un enfoque diferente como modelado no lineal.
""")

# Crear figura
fig, axes = plt.subplots(2, 3, figsize=(18, 10))
axes = axes.flatten()

# Lista de DataFrames y nombres
series_diff = [
    ('Am√©rica', serie_america),
    ('Asia', serie_asia),
    ('Europa', serie_europa),
    ('Ocean√≠a', serie_oceania),
    ('√Åfrica', serie_africa),
]

# Graficar cada serie
for i, (nombre, df) in enumerate(series_diff):
    if 'Valor_diff' in df and df['Valor_diff'].dropna().size >= 3:
        sns.lineplot(x=df.index, y=df['Valor_diff'], ax=axes[i])
        axes[i].set_title(f'{nombre} - Valor diferenciado')
        axes[i].set_ylabel('Œî Valor')
    elif 'Valor' in df and df['Valor'].dropna().size >= 3:
        sns.lineplot(x=df.index, y=df['Valor'], ax=axes[i])
        axes[i].set_title(f'{nombre} - Serie original (estacionaria)')
        axes[i].set_ylabel('Valor')
    else:
        axes[i].set_title(f'{nombre} - Sin datos')
        axes[i].axis('off')

    axes[i].set_xlabel('A√±o')

# Eliminar subplot vac√≠o (el sexto)
fig.delaxes(axes[5])

plt.tight_layout()
st.pyplot(fig)

st.markdown("""### Tras quitar la tendencia (diferenciaci√≥n de primer orden), los valores ya no muestran crecimiento sistem√°tico. Oscilan alrededor de cero.

1. Am√©rica ‚Äì Valor diferenciado
    Pico negativo profundo (~1965‚Äì1970) y pico positivo despu√©s

      Posibles causas:
    
      * Crisis del petr√≥leo de los a√±os 70: aunque afect√≥ m√°s a los pa√≠ses industrializados, en Am√©rica Latina produjo cambios abruptos en consumo de energ√≠a.
    
      * Desindustrializaci√≥n parcial en algunos pa√≠ses y reformas estructurales.
    
      * Regulaci√≥n ambiental inicial en EE.UU. con la creaci√≥n de la EPA (1970), que marc√≥ una reducci√≥n en emisiones industriales.
    
      * Volatilidad macroecon√≥mica en Sudam√©rica (hiperinflaci√≥n, dictaduras, ca√≠das del PIB) tambi√©n puede explicar estos saltos abruptos.

2. Asia ‚Äì Valor diferenciado
    Muchos picos grandes desde ~1980 hasta 2000+

      Posibles causas:
    
      * Aceleraci√≥n de la industrializaci√≥n china desde la apertura de Deng Xiaoping en 1978.
    
      * Crecimiento de India a partir de los 90.
    
      * Urbanizaci√≥n masiva, expansi√≥n de infraestructura, transporte y consumo energ√©tico.
    
      * Cambios abruptos en pol√≠ticas de producci√≥n energ√©tica (transiciones carb√≥n ‚Üí otras fuentes).
    
      * Alta variabilidad: Asia tiene pa√≠ses con din√°micas muy distintas (desde Jap√≥n y Corea hasta Indonesia y Pakist√°n).

3. Europa ‚Äì Serie original (estacionaria)
    Tendencia clara, sin picos grandes post-diferenciaci√≥n porque no se aplic√≥

    Tendencia decreciente sostenida:

    * Desindustrializaci√≥n y terciarizaci√≥n de la econom√≠a desde los 80.

    * Leyes ambientales fuertes desde el Protocolo de Kioto (1997) y Pacto Verde Europeo.

    * Reducci√≥n del uso de carb√≥n y transici√≥n energ√©tica m√°s temprana que en otras regiones.

4. Ocean√≠a ‚Äì Sin datos
    No se puede evaluar, pero si se completa luego, podr√≠amos investigar:
    Australia como emisor dominante (por miner√≠a, carb√≥n).
    Posibles picos: pol√≠ticas ambientales, sequ√≠as, incendios forestales, tratados.

5. √Åfrica ‚Äì Valor diferenciado
    Picos dispersos, sin tendencia clara, pero visibles oscilaciones

      Posibles causas:
      * Variabilidad en consumo energ√©tico sin un patr√≥n homog√©neo: muchos pa√≠ses dependen de biomasa, con bajo uso industrial.
    
      * Pa√≠ses con extracci√≥n de petr√≥leo (Nigeria, Angola) pueden provocar saltos cuando abren/cambian producci√≥n.
    
      * Conflictos armados (e.g., guerras civiles, crisis pol√≠ticas) afectan bruscamente la actividad econ√≥mica y por ende las emisiones.
      * Crecimiento poblacional sin desarrollo industrial intensivo: no hay un patr√≥n de aumento estable como en Asia.


""")



st.markdown("### üîÅ Test de estacionariedad sobre series diferenciadas (d = 1)")

series_diff = [
    ('Am√©rica', serie_america),
    ('Asia', serie_asia),
    ('Europa', serie_europa),
    ('Ocean√≠a', serie_oceania),
    ('√Åfrica', serie_africa),
]

# Tabla de resultados
resultados_diff = []

for nombre, df in series_diff:
    st.markdown(f"#### üåç {nombre}")

    if 'Valor_diff' not in df.columns:
        st.warning("‚ö†Ô∏è No tiene columna 'Valor_diff'. No se puede evaluar.")
        resultados_diff.append({
            "Regi√≥n": nombre,
            "ADF Differenced": "‚Äì",
            "p-value": "‚Äì",
            "Estacionaria (d=1)": "No evaluada"
        })
        continue

    serie = df['Valor_diff'].dropna()
    if len(serie) < 3:
        st.warning("‚ö†Ô∏è Serie diferenciada con pocos datos.")
        resultados_diff.append({
            "Regi√≥n": nombre,
            "ADF Differenced": "‚Äì",
            "p-value": "‚Äì",
            "Estacionaria (d=1)": "No evaluada"
        })
        continue

    try:
        result_diff = adfuller(serie)
        adf_stat = result_diff[0]
        pval = result_diff[1]
        crit_vals = result_diff[4]
        es_estacionaria = "S√≠" if pval < 0.05 else "No"

        st.markdown(f"- ADF Statistic: `{adf_stat:.4f}`")
        st.markdown(f"- p-value: `{pval:.4f}`")
        st.markdown("- Valores cr√≠ticos:")
        for key, val in crit_vals.items():
            st.markdown(f"  - {key}: `{val:.4f}`")

        if pval < 0.05:
            st.success("‚úÖ La serie diferenciada es **estacionaria** (se rechaza H‚ÇÄ)")
        else:
            st.error("üö´ La serie diferenciada **NO es estacionaria** (no se rechaza H‚ÇÄ)")

        resultados_diff.append({
            "Regi√≥n": nombre,
            "ADF Differenced": round(adf_stat, 4),
            "p-value": round(pval, 4),
            "Estacionaria (d=1)": es_estacionaria
        })

    except Exception as e:
        st.error(f"‚ö†Ô∏è Error al procesar: {e}")
        resultados_diff.append({
            "Regi√≥n": nombre,
            "ADF Differenced": "Error",
            "p-value": "Error",
            "Estacionaria (d=1)": "Error"
        })

# Mostrar tabla resumen
st.markdown("### üìã Resumen: Estacionariedad tras 1 diferenciaci√≥n")
df_resultados_diff = pd.DataFrame(resultados_diff)
st.dataframe(df_resultados_diff, use_container_width=True)

st.markdown("""
---

### üìå ¬øPor qu√© realizamos este an√°lisis?

Una vez que determinamos que la serie original **no es estacionaria**, la primera estrategia para estabilizarla es **aplicar una diferenciaci√≥n**: restar cada valor con su valor anterior.

Este paso elimina la tendencia y transforma la serie en una que fluct√∫e alrededor de una media constante.  
Pero no siempre es suficiente: por eso, debemos aplicar nuevamente el **test ADF** sobre la **serie diferenciada** para verificar si ya es apta para un modelo ARIMA.

---

### üéØ ¬øQu√© buscamos?

Con este an√°lisis buscamos determinar si:

- üîπ **Una sola diferenciaci√≥n (`d=1`)** ya basta ‚Üí podemos usar ARIMA(‚Ä¶, **d=1**, ‚Ä¶)
- üîπ **Todav√≠a no es estacionaria** ‚Üí podr√≠a requerir una segunda diferenciaci√≥n (`d=2`) o un modelo alternativo

Esto garantiza que el modelo ARIMA sea **v√°lido y confiable**, ya que uno de sus supuestos clave es que la serie sea estacionaria.

---
""")

st.markdown("### üìà Comparaci√≥n: Serie original vs diferenciada (d=1)")

series_diff = [
    ('Am√©rica', serie_america),
    ('Asia', serie_asia),
    ('Europa', serie_europa),
    ('Ocean√≠a', serie_oceania),
    ('√Åfrica', serie_africa),
]

for nombre, df in series_diff:
    st.markdown(f"#### üåç {nombre}")

    if 'Valor' not in df.columns or df['Valor'].dropna().size < 3:
        st.warning("‚ö†Ô∏è Serie original vac√≠a o insuficiente.")
        continue

    if 'Valor_diff' not in df.columns or df['Valor_diff'].dropna().size < 3:
        st.warning("‚ö†Ô∏è Serie diferenciada vac√≠a o no generada.")
        continue

    fig, ax = plt.subplots(figsize=(12, 4))

    # Graficar serie original
    ax.plot(df['A√±o'], df['Valor'], label='Serie original', color='steelblue')

    # Graficar serie diferenciada (alinea por a√±o a partir del segundo punto)
    ax.plot(df['A√±o'], df['Valor_diff'], label='Serie diferenciada (d=1)', color='firebrick', linestyle='--')

    ax.set_title(f'{nombre} - Comparaci√≥n de serie original vs diferenciada')
    ax.set_xlabel('A√±o')
    ax.set_ylabel('Emisiones (CO2eq)')
    ax.legend()
    ax.grid(alpha=0.3)

    st.pyplot(fig)

st.markdown("""
---

### üìä Comparaci√≥n visual: Serie original vs. Serie diferenciada

Para aplicar un modelo ARIMA v√°lido, es necesario que las series sean **estacionarias**, es decir, que no presenten tendencia sostenida en el tiempo.

Una t√©cnica com√∫n para lograr esto es la **diferenciaci√≥n**, que consiste en restar cada valor con el anterior. Esto transforma una serie creciente o decreciente en una que **oscila alrededor de una media estable**, idealmente cercana a cero.

---

### üéØ ¬øQu√© muestran estos gr√°ficos?

Cada gr√°fico compara:

- üìò **Serie original** (l√≠nea azul): representa los valores absolutos de emisiones a lo largo del tiempo.
- üî¥ **Serie diferenciada** (l√≠nea roja punteada): representa los **cambios entre a√±os consecutivos**.

---

### üß† ¬øPara qu√© sirve?

Visualizar ambas series permite:

- Confirmar si la **tendencia fue eliminada correctamente**.
- Ver si la serie diferenciada presenta una **fluctuaci√≥n estable**, condici√≥n necesaria para que un modelo ARIMA con `d=1` sea v√°lido.
- Detectar visualmente **outliers o variaciones bruscas** que podr√≠an requerir un tratamiento adicional.

---
""")

st.markdown("### Como ya se logran que las series sean estacionarias (tomo d= 1 para Am√©ricas, Asia, √Åfrica y Ocean√≠a, y d= 0 para Europa que ya era estacionaria)"
            "luego calculo  ACF para obtener el valor de q y PACF para obtener el valor de p ")

st.markdown("## ACF y PACF - Series diferenciadas por regi√≥n")


series_diff = [
    ('Am√©rica', serie_america),
    ('Asia', serie_asia),
    ('Europa', serie_europa),
    ('Ocean√≠a', serie_oceania),
    ('√Åfrica', serie_africa),
]

for nombre, df in series_diff:
    st.markdown(f"### {nombre}")

    if 'Valor_diff' not in df:
        st.warning("‚ö†Ô∏è No tiene columna `Valor_diff`, se omite.")
        continue

    serie = df['Valor_diff'].dropna()
    if len(serie) < 3:
        st.warning("‚ö†Ô∏è Muy pocos datos para mostrar ACF/PACF confiables.")
        continue

    fig, ax = plt.subplots(1, 2, figsize=(12, 4))
    fig.suptitle(f'ACF y PACF - {nombre} (Valor diferenciado)', fontsize=14)

    plot_acf(serie, lags=15, ax=ax[0])
    plot_pacf(serie, lags=15, ax=ax[1])

    ax[0].set_title('ACF')
    ax[1].set_title('PACF')

    plt.tight_layout()
    st.pyplot(fig)


st.markdown("""
### ¬øPor qu√© analizamos ACF y PACF?

Una vez que la serie ha sido diferenciada para volverla estacionaria, se analizan los patrones de autocorrelaci√≥n:

- **ACF (Autocorrelation Function)**: muestra cu√°nto se relaciona cada valor con sus rezagos. Sirve para sugerir el par√°metro `q` del modelo ARIMA (componente de media m√≥vil).
- **PACF (Partial ACF)**: muestra la correlaci√≥n con rezagos directos, eliminando la influencia de intermedios. Se usa para determinar el par√°metro `p` (componente autorregresiva).

Estos gr√°ficos nos permiten **identificar el orden adecuado del modelo ARIMA (p, d, q)** observando en qu√© rezagos se cortan las correlaciones.

> En general:
> - Si ACF se corta bruscamente en rezago k ‚áí `q = k`
> - Si PACF se corta bruscamente en rezago k ‚áí `p = k`
""")


st.markdown("""
### ¬øC√≥mo se eligen los par√°metros `p` y `q` para ARIMA?

ACF (Autocorrelation Function)
    El primer lag es significativamente distinto de cero, luego se corta.
    Esto sugiere un componente MA (q) de 1.

PACF (Partial ACF)
    El primer lag tambi√©n es significativamente distinto de cero, y luego se corta.
    Esto sugiere un componente AR (p) de 1.

Como ya aplicamos un diff es sugerido un componente (d) de 1

Modelo candidato: ARIMA(p=1, d=1, q=1)
""")
st.markdown("""AN√ÅLISIS REGI√ìN POR REGI√ìN

  Am√©rica

    ACF: lag 1 claramente significativo ‚Üí q = 1

    PACF: lag 1 claramente significativo ‚Üí p = 1

    Sugerencia: ARIMA(1, 1, 1)

  Asia

    ACF: lag 1 es el √∫nico fuera del azul ‚Üí q = 1

    PACF: lag 1 tambi√©n destaca ‚Üí p = 1

    Sugerencia: ARIMA(1, 1, 1)

  Ocean√≠a

    ACF: lags 2 y 5 sobresalen ‚Üí probar q = 2 o q = 5

    PACF: lag 5 y lag 10 visibles ‚Üí p = 5 o p = 10

    Serie m√°s ruidosa, se puede empezar con ARIMA(5, 1, 2) y afinar.

  √Åfrica
  
    ACF: lag 1 y lag 7 apenas sobresalen ‚Üí q = 1

    PACF: lag 5 y 6 aparecen d√©biles, pero no demasiado claros ‚Üí p = 1 o p = 2

    Sugerencia conservadora: ARIMA(1, 1, 1) y si no da buen resultado, probar con ARIMA(2, 1, 1)
""")


#################################################################################

# ac√° deberia calular el AIC pero no puedo

# warnings.filterwarnings("ignore", category=UserWarning)
# warnings.filterwarnings("ignore", category=FutureWarning)
# warnings.filterwarnings("ignore", category=ValueWarning)
#
# p = q = range(0,3)
# d = 1
# pdq = list(itertools.product(p,[d],q))
# resultados = {}
#
# for nombre, serie in series_continentales.items():
#     best_aic   = np.inf
#     best_order = None
#
#     for order in pdq:
#         try:
#             res = SARIMAX(serie, order=order,
#                           enforce_stationarity=False,
#                           enforce_invertibility=False
#                          ).fit(disp=False)
#             if res.aic < best_aic:
#                 best_aic, best_order = res.aic, order
#         except Exception:
#             continue
#
#     resultados[nombre] = {'order': best_order, 'AIC': best_aic}
#
# #¬†‚Äî¬†Muestra el resumen por pantalla
# for k, v in resultados.items():
#     print(f"{k:8s}  ->  (p,d,q) = {v['order']}   |  AIC = {v['AIC']:.2f}")

#############################################################################################3


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Suprimir warnings ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", category=ValueWarning)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Par√°metros ARIMA y SARIMA ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
parametros_arima = {
    'Am√©rica': (0, 1, 1),
    'Asia': (1, 1, 2),
    'Europa': (1, 1, 2),
    'Ocean√≠a': (0, 1, 2),
    '√Åfrica': (2, 1, 2)
}

parametros_estacionales = {
    'Am√©rica': [(1, 0, 1, 4), (1, 1, 1, 4)],
    'Asia': [(1, 1, 1, 4)],
    'Ocean√≠a': [(1, 1, 1, 4)]
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Series por continente (ya definidas) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
series_dict = {
    'Am√©rica': serie_america,
    'Asia': serie_asia,
    'Europa': serie_europa,
    'Ocean√≠a': serie_oceania,
    '√Åfrica': serie_africa
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Ajustar modelos y mostrar resultados ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.title("üìà Ajuste de modelos ARIMA/SARIMA por continente")

for nombre, df in series_dict.items():
    st.subheader(f"üåç {nombre}")
    y = df['Valor'].dropna()

    if len(y) < 10:
        st.warning("‚ö†Ô∏è Muy pocos datos para ajustar el modelo.")
        continue

    try:
        p, d, q = parametros_arima[nombre]

        if nombre in parametros_estacionales:
            mejores_resultados = None
            mejor_aic = float('inf')

            for (P, D, Q, s) in parametros_estacionales[nombre]:
                st.markdown(f"Probar SARIMA({p},{d},{q})√ó({P},{D},{Q},{s})")

                model = SARIMAX(
                    y,
                    order=(p, d, q),
                    seasonal_order=(P, D, Q, s),
                    enforce_stationarity=False,
                    enforce_invertibility=False
                )
                res = model.fit(disp=False)

                st.write(f"AIC = {res.aic:.2f}")
                if res.aic < mejor_aic:
                    mejor_aic = res.aic
                    mejores_resultados = res

            if mejores_resultados:
                st.success("‚úÖ Mejor modelo elegido")
                st.text(mejores_resultados.summary())

                fig = mejores_resultados.plot_diagnostics(figsize=(10, 6))
                fig.suptitle(f'Diagn√≥stico de residuos - {nombre}', fontsize=14)
                st.pyplot(fig)

        else:
            model = SARIMAX(
                y,
                order=(p, d, q),
                enforce_stationarity=False,
                enforce_invertibility=False
            )
            res = model.fit(disp=False)

            st.success("‚úÖ Modelo ajustado (ARIMA)")
            st.text(res.summary())

            fig = res.plot_diagnostics(figsize=(10, 6))
            fig.suptitle(f'Diagn√≥stico de residuos - {nombre}', fontsize=14)
            st.pyplot(fig)

    except Exception as e:
        st.error(f"‚ùå Error al ajustar modelo para {nombre}: {e}")




st.markdown("""
## Evaluaci√≥n general por regi√≥n

Luego de probar varios modelos distintos conclu√≠mos que √©stos √∫ltimos podr√≠an ser los m√°s indicados a utilizar

| Continente  | Modelo elegido      | AIC        | JB test (Normalidad) | ¬øModelo √∫til?               |
| ----------- | ------------------- | ---------- | -------------------- | --------------------------- |
| **Am√©rica** | `(0,1,1)x(1,1,1,4)` | **610.47** |  JB=8.73 (p=0.01)   |  S√≠ |
| **Asia**    | `(1,1,2)x(1,1,1,4)` | 598.03     |  JB=0.38 (p=0.83)   |  S√≠                       |
| **Europa**  | `(1,1,2)`           | 778.23     |  JB=0.42 (p=0.81)   |  Aceptable pero d√©bil     |
| **Ocean√≠a** | `(0,1,2)x(1,1,1,4)` | 501.76     |  JB=1.42 (p=0.49)   |  S√≥lido                   |
| **√Åfrica**  | `(2,1,2)`           | 723.59     |  JB=2.96 (p=0.23)   |  Aceptable                |
""")







st.markdown("""### üîç PREDICCIONES SEG√öN MODELOS CONSIDERADOS""")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Suprimir warnings ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", category=ValueWarning)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Series por continente ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
series_dict = {
    'Am√©rica': serie_america,
    'Asia': serie_asia,
    'Europa': serie_europa,
    'Ocean√≠a': serie_oceania,
    '√Åfrica': serie_africa
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Configuraci√≥n de modelos finales ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
modelos_config = {
    'Am√©rica':  {'order': (0, 1, 1), 'seasonal_order': (1, 1, 1, 4)},
    'Asia':     {'order': (1, 1, 2), 'seasonal_order': (1, 1, 1, 4)},
    'Europa':   {'order': (1, 1, 2), 'seasonal_order': None},
    'Ocean√≠a':  {'order': (0, 1, 2), 'seasonal_order': (1, 1, 1, 4)},
    '√Åfrica':   {'order': (2, 1, 2), 'seasonal_order': None}
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ T√≠tulo de la app ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.title("üìà Pron√≥stico SARIMA por continente")
st.markdown("## Predicci√≥n de los pr√≥ximos 5 a√±os usando modelos configurados manualmente.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Loop de pron√≥stico ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
for nombre, df in series_dict.items():
    if nombre ==  'Ocean√≠a':
        continue
    else:
        st.subheader(f"üåç {nombre}")

        try:
            # Verificar que haya datos y columnas necesarias
            if df.empty or 'A√±o' not in df.columns or 'Valor' not in df.columns:
                st.warning(f"{nombre}: Datos incompletos o vac√≠os.")
                continue

            # Asegurar que 'A√±o' est√© en formato datetime
            if not np.issubdtype(df['A√±o'].dtype, np.datetime64):
                df['A√±o'] = pd.to_datetime(df['A√±o'].astype(str), format='%Y')

            serie = df.set_index('A√±o')['Valor'].dropna()

            # Para todos excepto Ocean√≠a: exigir m√≠nimo de datos
            if len(serie) < 10 and nombre != 'Ocean√≠a':
                st.warning(f"{nombre}: Muy pocos datos para modelar.")
                continue

            if len(serie) < 10 and nombre == 'Ocean√≠a':
                st.warning(f"‚ö†Ô∏è {nombre}: Se fuerza el modelo con pocos datos ({len(serie)} valores).")

            # Obtener configuraci√≥n del modelo
            config = modelos_config[nombre]
            order = config['order']
            seasonal_order = config.get('seasonal_order', (0, 0, 0, 0))

            # Ajustar modelo
            model = SARIMAX(
                serie,
                order=order,
                seasonal_order=seasonal_order,
                enforce_stationarity=False,
                enforce_invertibility=False
            )
            res = model.fit(disp=False)

            # Pron√≥stico
            forecast = res.get_forecast(steps=5)
            pred = forecast.predicted_mean
            conf_int = forecast.conf_int()

            # √çndice para a√±os futuros
            last_year = serie.index[-1].year
            pred.index = pd.date_range(start=f'{last_year + 1}', periods=5, freq='Y')
            conf_int.index = pred.index

            # Graficar
            fig, ax = plt.subplots(figsize=(10, 5))
            serie.plot(ax=ax, label='Hist√≥rico', color='blue', linewidth=2)
            pred.plot(ax=ax, label='Pron√≥stico', color='red', linewidth=2)
            ax.fill_between(pred.index, conf_int.iloc[:, 0], conf_int.iloc[:, 1], color='pink', alpha=0.3)

            # Est√©tica general achicada
            ax.set_title(f'Predicci√≥n con intervalo de confianza - {nombre}', fontsize=8)
            ax.set_xlabel('A√±o', fontsize=7)
            ax.set_ylabel('Valor estimado', fontsize=7)
            ax.tick_params(axis='both', labelsize=6)
            ax.legend(fontsize=6, loc='upper left')
            ax.grid(True, linewidth=0.3)
            plt.tight_layout()
            st.pyplot(fig)

        except Exception as e:
            st.error(f"‚ùå Error al procesar {nombre}: {e}")

series_dict2 = {}

# Recorrer cada continente y construir series temporales
for cont in continents:
    df_serie = df_fao[
        (df_fao['√Årea'] == cont) &
        (df_fao['Elemento'] == 'Emisiones (CO2eq) (AR5)') &
        (df_fao['C√≥digo del producto'] == 6825)
    ].copy()

    # Crear serie temporal completa con √≠ndice anual
    y = df_serie.set_index(pd.PeriodIndex(df_serie['A√±o'], freq='Y'))['Valor']

    # Divisi√≥n: entrenamiento vs validaci√≥n
    y_train = y[:'2018']
    y_test  = y['2018':]

    series_dict2[cont] = {
        'y_full': y,
        'y_train': y_train,
        'y_test': y_test
    }

if 'Ocean√≠a' in series_dict2:
    try:
        # Extraer la serie temporal y eliminar nulos
        datos = series_dict2['Ocean√≠a']
        serie = datos['y_full'].dropna()

        if len(serie) < 3:
            st.warning("‚ö†Ô∏è Ocean√≠a: muy pocos datos para ajustar el modelo.")
        else:
            st.info(f"üî¢ Datos cargados: {len(serie)}")

            # Configuraci√≥n del modelo (puede adaptarse)
            order = (0, 1, 2)
            seasonal_order = (1, 1, 1, 4)

            # Ajustar modelo
            model = SARIMAX(
                serie,
                order=order,
                seasonal_order=seasonal_order,
                enforce_stationarity=False,
                enforce_invertibility=False
            )
            res = model.fit(disp=False)

            # Pron√≥stico
            forecast = res.get_forecast(steps=5)
            pred = forecast.predicted_mean
            conf_int = forecast.conf_int()

            # Fechas futuras
            last_year = serie.index[-1].year
            pred.index = pd.date_range(start=f'{last_year + 1}', periods=5, freq='Y')
            conf_int.index = pred.index

            # Gr√°fico
            fig, ax = plt.subplots(figsize=(10, 5))
            serie.plot(ax=ax, label='Hist√≥rico', color='blue', linewidth=2)
            pred.plot(ax=ax, label='Pron√≥stico', color='red', linewidth=2)
            ax.fill_between(pred.index, conf_int.iloc[:, 0], conf_int.iloc[:, 1], color='pink', alpha=0.3)

            # Est√©tica general achicada
            ax.set_title(f'Predicci√≥n - con intervalo de confianza Ocean√≠a', fontsize=8)
            ax.set_xlabel('A√±o', fontsize=7)
            ax.set_ylabel('Valor estimado', fontsize=7)
            ax.tick_params(axis='both', labelsize=6)
            ax.legend(fontsize=6, loc='upper left')
            ax.grid(True, linewidth=0.3)
            plt.tight_layout()
            st.pyplot(fig)

    except Exception as e:
        st.error(f"‚ùå Error al procesar Ocean√≠a: {e}")

st.markdown("""
## üåç An√°lisis comparativo de proyecciones por continente (SARIMAX con tendencia lineal)

A continuaci√≥n se presenta una lectura interpretativa de los pron√≥sticos de emisiones de CO‚ÇÇeq (AR5) por continente, modelados con SARIMAX sin estacionalidad y con tendencia lineal.

---

### üåé **Am√©ricas**
- üìâ **Tendencia hist√≥rica**: Aumento hasta aproximadamente 2010 y luego descenso sostenido.
- üîÆ **Pron√≥stico**: El modelo predice una **ca√≠da continua** en las emisiones hasta 2043.
- ‚úÖ Buen ajuste, con **IC relativamente acotado**, lo que sugiere confianza razonable en la predicci√≥n.

---

### üåç **√Åfrica**
- üìà **Tendencia hist√≥rica**: Crecimiento constante y progresivo desde 1990.
- üîÆ **Pron√≥stico**: Se espera un **fuerte aumento** de emisiones en las pr√≥ximas dos d√©cadas.
- ‚ö†Ô∏è Zona cr√≠tica, ya que **no hay se√±ales de desaceleraci√≥n** en el modelo. El IC tambi√©n se expande con el tiempo, indicando **incertidumbre creciente**.

---

### üåê **Europa**
- üìâ **Tendencia hist√≥rica**: Descenso constante en las emisiones desde 1990.
- üîÆ **Pron√≥stico**: Contin√∫a la **tendencia descendente**, aunque con una leve curva de inflexi√≥n hacia el alza.
- ‚úÖ Muy buen ajuste. Es el **modelo m√°s robusto** entre todos los continentes, con **IC angosto y centrado**.

---

### üåè **Asia**
- üìà **Tendencia hist√≥rica**: Crecimiento muy pronunciado, especialmente desde el a√±o 2000.
- üîÆ **Pron√≥stico**: El modelo proyecta un **aumento constante** y fuerte en las emisiones.
- ‚ö†Ô∏è Aunque el modelo es consistente, el **IC amplio sugiere incertidumbre a largo plazo**. Zona preocupante por su peso global en emisiones.

---

### üåä **Ocean√≠a**
- ‚öñÔ∏è **Tendencia hist√≥rica**: Serie m√°s err√°tica, con variaciones y sin una tendencia clara.
- üîÆ **Pron√≥stico**: Ligero descenso, pero con **alta incertidumbre** (IC muy ancho).
- ‚ö†Ô∏è El modelo **tiene poca confianza en el futuro** de la serie debido a la falta de una tendencia fuerte.

---

### üìå Conclusi√≥n general:
- **Europa y Am√©rica** muestran trayectorias descendentes, lo que es positivo.
- **Asia y √Åfrica** presentan **fuertes crecimientos proyectados**, lo cual representa un desaf√≠o urgente en t√©rminos de pol√≠ticas clim√°ticas.
- **Ocean√≠a** tiene una proyecci√≥n incierta debido a la **alta volatilidad hist√≥rica**.

""")



st.markdown("""
## üîç Preparaci√≥n de series temporales para entrenamiento y validaci√≥n

Para poder entrenar modelos de predicci√≥n y evaluar su desempe√±o, se dividieron las series de emisiones por continente en dos subconjuntos:

- **Serie completa (`y_full`)**: contiene todos los valores hist√≥ricos desde 1961 (o el primer a√±o disponible).
- **Entrenamiento (`y_train`)**: valores hasta el a√±o **2018 inclusive**. Esta parte se utiliza para ajustar los modelos.
- **Validaci√≥n (`y_test`)**: valores desde el a√±o **2018 en adelante**, reservados para comparar con las predicciones y calcular el error (por ejemplo, MAPE).

Esta divisi√≥n es fundamental para asegurar que los modelos no est√©n viendo los datos del futuro durante el entrenamiento y as√≠ obtener una evaluaci√≥n realista.

> La variable `series_dict` guarda todas las series por continente, lo que permite acceder f√°cilmente a sus versiones completas, de entrenamiento y de prueba.
""")



# Continentes a analizar
continents = ['Am√©ricas', '√Åfrica', 'Europa', 'Asia', 'Ocean√≠a']
series_dict = {}

# Recorrer cada continente y construir series temporales
for cont in continents:
    df_serie = df_fao[
        (df_fao['√Årea'] == cont) &
        (df_fao['Elemento'] == 'Emisiones (CO2eq) (AR5)') &
        (df_fao['C√≥digo del producto'] == 6825)
    ].copy()

    # Crear serie temporal completa con √≠ndice anual
    y = df_serie.set_index(pd.PeriodIndex(df_serie['A√±o'], freq='Y'))['Valor']

    # Divisi√≥n: entrenamiento vs validaci√≥n
    y_train = y[:'2018']
    y_test  = y['2018':]

    series_dict[cont] = {
        'y_full': y,
        'y_train': y_train,
        'y_test': y_test
    }

# Ejemplo visualizaci√≥n r√°pida de una serie
st.markdown("### üìà √öltimos valores de la serie de entrenamiento (ejemplo: Am√©rica)")
st.write(series_dict['Am√©ricas']['y_train'].tail())


st.markdown("""
### üìä An√°lisis visual de las emisiones hist√≥ricas por continente

El siguiente gr√°fico permite **explorar la evoluci√≥n de las emisiones de gases de efecto invernadero (CO‚ÇÇeq)** para cada regi√≥n entre los a√±os disponibles.

La serie se encuentra dividida en:

- üü© **Entrenamiento (verde)**: hasta 2018 inclusive. Se usa para ajustar modelos predictivos.
- üî¥ **Validaci√≥n (rojo punteado)**: desde 2018 en adelante. Se compara contra los pron√≥sticos.
- üîµ **Serie completa (azul)**: toda la secuencia original.

Esto es clave para construir modelos confiables y medir su capacidad de predicci√≥n sin caer en sobreajuste.
""")


# Construcci√≥n de las series
for cont in continents:
    df_serie = df_fao[
        (df_fao['√Årea'] == cont) &
        (df_fao['Elemento'] == 'Emisiones (CO2eq) (AR5)') &
        (df_fao['C√≥digo del producto'] == 6825)
    ].copy()

    y = df_serie.set_index(pd.PeriodIndex(df_serie['A√±o'], freq='Y'))['Valor']

    y_train = y[:'2018']
    y_test  = y['2018':]

    series_dict[cont] = {
        'y_full': y,
        'y_train': y_train,
        'y_test': y_test
    }

# Visualizaci√≥n con selecci√≥n de continente
st.markdown("## üåç Visualizaci√≥n de series hist√≥ricas por continente")

continente_seleccionado = st.selectbox("Seleccion√° un continente:", continents)

serie = series_dict[continente_seleccionado]

fig = go.Figure()

fig.add_trace(go.Scatter(
    x=serie['y_full'].index.to_timestamp(),
    y=serie['y_full'].values,
    mode='lines+markers',
    name='Serie completa',
    line=dict(color='steelblue')
))

fig.add_trace(go.Scatter(
    x=serie['y_train'].index.to_timestamp(),
    y=serie['y_train'].values,
    mode='lines',
    name='Entrenamiento',
    line=dict(color='green')
))

fig.add_trace(go.Scatter(
    x=serie['y_test'].index.to_timestamp(),
    y=serie['y_test'].values,
    mode='lines',
    name='Validaci√≥n',
    line=dict(color='firebrick', dash='dash')
))

fig.update_layout(
    title=f"Serie temporal de emisiones ‚Äì {continente_seleccionado}",
    xaxis_title="A√±o",
    yaxis_title="Emisiones CO‚ÇÇeq (kt)",
    legend=dict(x=0, y=1),
    height=500
)

st.plotly_chart(fig, use_container_width=True)

st.markdown("""
### ‚ÑπÔ∏è Evaluaci√≥n de Modelos ARIMA con AIC

Para cada regi√≥n se evaluaron m√∫ltiples combinaciones de modelos ARIMA (valores de p, d, q entre 0 y 2).

#### üìå ¬øQu√© es el AIC?

El **Akaike Information Criterion (AIC)** mide la calidad del modelo ajustado penalizando la complejidad.  
Un valor de **AIC m√°s bajo** implica un mejor equilibrio entre **ajuste a los datos** y **simplicidad del modelo**.

#### ‚öôÔ∏è Estrategia aplicada:

- Se ajustaron **27 modelos distintos por regi√≥n**.
- Se us√≥ solo componente ARIMA simple (sin estacionalidad).
- Para cada modelo, se calcul√≥ el AIC.
- Se seleccion√≥ el modelo con menor AIC como el mejor candidato.

A continuaci√≥n, se muestran los modelos √≥ptimos encontrados:
""")


# Par√°metros a evaluar
p = d = q = range(0, 3)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(0, 0, 0, 0)]  # sin estacionalidad

# Diccionario de mejores modelos por continente
best_arima_results = {}

st.markdown("### üîç B√∫squeda de Mejor Modelo ARIMA por Continente")

for cont in series_dict:
    st.markdown(f"#### üåç {cont}")

    y_train = series_dict[cont]['y_train']
    best_score = np.inf
    best_params = None
    best_seasonal_params = None
    best_model = None

    for param in pdq:
        for param_seasonal in seasonal_pdq:
            try:
                mod = sm.tsa.statespace.SARIMAX(
                    y_train,
                    order=param,
                    seasonal_order=param_seasonal,
                    enforce_stationarity=False,
                    enforce_invertibility=False
                )
                results = mod.fit(disp=False)

                if results.aic < best_score:
                    best_score = results.aic
                    best_params = param
                    best_seasonal_params = param_seasonal
                    best_model = results
            except:
                continue

    best_arima_results[cont] = {
        'best_model': best_model,
        'best_aic': best_score,
        'best_order': best_params,
        'best_seasonal_order': best_seasonal_params
    }

    st.markdown(f"""
    ‚úÖ **Mejor modelo ARIMA**: {best_params}  
    üìâ **AIC**: {best_score:.2f}  
    """)

st.markdown("""
### ‚ÑπÔ∏è An√°lisis estad√≠stico de modelos ARIMA

Una vez identificados los mejores modelos ARIMA para cada regi√≥n seg√∫n el criterio AIC, se realiza un an√°lisis m√°s profundo sobre los **coeficientes estimados** del modelo:

- Se eval√∫a si cada coeficiente es **estad√≠sticamente significativo**, utilizando el **p-valor** del test z.
- Un coeficiente se considera significativo si su **p-valor < 0.05**.
- Si todos los coeficientes son significativos, el modelo es estad√≠sticamente s√≥lido.
- En caso contrario, puede indicar que ciertos t√©rminos del modelo (AR, MA, etc.) no aportan valor y podr√≠an eliminarse o ajustarse.

A continuaci√≥n, se presenta la tabla de coeficientes por continente y una advertencia si se detectan coeficientes no significativos.
""")


st.markdown("## üìä An√°lisis estad√≠stico de modelos ARIMA ajustados")

for cont in series_dict:
    st.markdown(f"### üåç {cont}")

    y_train = series_dict[cont]['y_train']
    order = best_arima_results[cont]['best_order']
    sorder = best_arima_results[cont]['best_seasonal_order']

    try:
        mod = sm.tsa.statespace.SARIMAX(
            y_train,
            order=order,
            seasonal_order=sorder,
            enforce_stationarity=False,
            enforce_invertibility=False
        )
        results = mod.fit(disp=False)

        # Extraer coeficientes y p-valores directamente
        coef = results.params
        pvals = results.pvalues
        df_stats = pd.DataFrame({'Coeficiente': coef, 'p-valor': pvals})

        st.dataframe(df_stats)

        # Evaluar significancia
        not_significant = df_stats[df_stats['p-valor'] > 0.05]
        if not not_significant.empty:
            st.warning("‚ö†Ô∏è Coeficientes no significativos detectados (p > 0.05):")
            st.dataframe(not_significant)
        else:
            st.success("‚úÖ Todos los coeficientes son estad√≠sticamente significativos (p < 0.05).")

    except Exception as e:
        st.error(f"‚ùå Error al ajustar modelo para {cont}: {e}")


st.markdown("""
## üìä An√°lisis estad√≠stico de modelos ARIMA ajustados

Se presentan los resultados del ajuste de modelos SARIMAX sobre las series de emisiones por continente.  
Se interpreta la significancia estad√≠stica de cada coeficiente usando un umbral cl√°sico de **p < 0.05**.

---

### üåé Am√©ricas

- **ma.L1** = -0.7796 | p = 0.000 ‚Üí ‚úÖ Significativo. Fuerte componente MA(1).
- **ma.L2** = 0.2189 | p = 0.066 ‚Üí ‚ö†Ô∏è No significativo. No se justifica el segundo rezago.
- **sigma2** = 1.14e+11 | p = 0.000 ‚Üí üîß Varianza del error, significativa.

**Conclusi√≥n:** Modelo parcialmente adecuado. Se puede simplificar a `SARIMAX(1,0,0)` con tendencia constante.

---

### üåç √Åfrica

- **ar.L1** = -0.7363 | p = 0.000 ‚Üí ‚úÖ Muy significativo. Fuerte efecto autoregresivo.
- **ma.L1** = 0.6954 | p = 0.000 ‚Üí ‚úÖ Significativo. Impacto del error rezagado.
- **ma.L2** = -0.6116 | p = 0.000 ‚Üí ‚úÖ Significativo. Mejora del ajuste.
- **sigma2** = 5.15e+09 | p = 0.000 ‚Üí üîß Varianza del error.

**Conclusi√≥n:** Todos los coeficientes son significativos. Modelo bien ajustado. Se sugiere `SARIMAX(1,0,2, trend='t')`.

---

### üåç Europa

- **ar.L1** = -0.7569 | p = 0.001 ‚Üí ‚úÖ Significativo. Dependencia temporal presente.
- **ma.L1** = 0.0329 | p = 0.865 ‚Üí ‚ùå No significativo. Podr√≠a eliminarse.
- **ma.L2** = -0.3311 | p = 0.088 ‚Üí ‚ö†Ô∏è L√≠mite. Marginalmente relevante.
- **sigma2** = 6.37e+10 | p = 0.000 ‚Üí üîß Varianza del error.

**Conclusi√≥n:** Modelo con buen componente AR, pero los MA no aportan. Se recomienda `SARIMAX(1,0,0, trend='c')`.

---

### üåè Asia

- **ma.L1** = -0.8318 | p = 0.000 ‚Üí ‚úÖ Muy significativo. Alta dependencia con el error.
- **ma.L2** = 0.2530 | p = 0.002 ‚Üí ‚úÖ Significativo. Aporta al modelo.
- **sigma2** = 2.83e+11 | p = 0.000 ‚Üí üîß Varianza del error.

**Conclusi√≥n:** Modelo bien especificado. Ambos MA son relevantes. Se sugiere `SARIMAX(0,0,2, trend='t')`.

---

### üåê Ocean√≠a

- **ar.L1** = -0.4601 | p = 0.411 ‚Üí ‚ùå No significativo.
- **ma.L1** = 0.4128 | p = 0.490 ‚Üí ‚ùå No significativo.
- **ma.L2** = -0.0221 | p = 0.958 ‚Üí ‚ùå Irrelevante.
- **sigma2** = 2.31e+09 | p = 0.000 ‚Üí üîß Varianza del error.

**Conclusi√≥n:** Ning√∫n coeficiente significativo. Se sugiere ETS sin tendencia o revisar calidad de datos.

---
""")


warnings.filterwarnings("ignore")

st.title("üìä MAPE por regi√≥n (√∫ltimos 5 a√±os)")
st.markdown("Comparaci√≥n de modelos SARIMAX/ETS ajustados por continente")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Par√°metros de entrada ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
validation_years = 5
continents = ['Am√©ricas', '√Åfrica', 'Europa', 'Asia', 'Ocean√≠a']
gas = 'Emisiones (CO2eq) (AR5)'
prod_code = 6825

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Filtrado de DataFrame ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
mask = (
    (df_fao['√Årea'].isin(continents)) &
    (df_fao['Elemento'] == gas) &
    (df_fao['C√≥digo del producto'] == prod_code) &
    (df_fao['A√±o'].between(1990, 2022))
)
df_ts = (
    df_fao[mask]
    .assign(Valor_Mt = df_fao['Valor'] / 1000)
    .pivot_table(index='A√±o', columns='√Årea', values='Valor_Mt')
    .sort_index()
)
df_ts.index = pd.PeriodIndex(df_ts.index, freq='Y')

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Configuraci√≥n de modelos ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
model_config = {
    'Asia':     ('sarimax_trend',     (0, 0, 2), 't'),
    '√Åfrica':   ('sarimax_trend',     (1, 0, 2), 't'),
    'Europa':   ('sarimax_constant',  (1, 0, 1), 'n'),
    'Am√©ricas': ('sarimax_constant',  (1, 0, 1), 'n'),
    'Ocean√≠a':  ('ets', None, None)
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ C√°lculo de MAPE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
mape_scores = {}

for cont in continents:
    try:
        y = df_ts[cont].dropna()

        if len(y) <= validation_years + 2:
            st.warning(f"‚ö†Ô∏è {cont}: no hay suficientes datos para validaci√≥n.")
            continue

        # Separar datos en entrenamiento y validaci√≥n
        y_train = y.iloc[:-validation_years]
        y_test = y.iloc[-validation_years:]

        model_type, order, trend = model_config[cont]

        if model_type in ['sarimax_trend', 'sarimax_constant']:
            model = SARIMAX(y_train, order=order, seasonal_order=(0, 0, 0, 0),
                            trend=trend, enforce_stationarity=False,
                            enforce_invertibility=False)
            fitted_model = model.fit(disp=False)
            forecast = fitted_model.get_forecast(steps=validation_years)
            y_pred = forecast.predicted_mean

        elif model_type == 'ets':
            model = ExponentialSmoothing(y_train, trend='add', seasonal=None,
                                          initialization_method='estimated')
            fitted_model = model.fit()
            y_pred = fitted_model.forecast(validation_years)

        # Calcular MAPE
        mape = mean_absolute_percentage_error(y_test, y_pred)
        mape_scores[cont] = round(mape * 100, 2)

    except Exception as e:
        st.error(f"‚ùå Error en {cont}: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Mostrar resultados ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if mape_scores:
    st.markdown("### ‚úÖ Resultados:")
    df_resultado = pd.DataFrame(list(mape_scores.items()), columns=["Regi√≥n", "MAPE (%)"])
    st.dataframe(df_resultado.set_index("Regi√≥n").sort_values(by="MAPE (%)"))
else:
    st.warning("No se pudo calcular el MAPE para ninguna regi√≥n.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3 ¬∑ Explicaci√≥n de MAPE en Markdown
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.markdown("""
### üßÆ ¬øQu√© es el MAPE y para qu√© sirve?

El **MAPE (Mean Absolute Percentage Error)** se utiliza para evaluar la **capacidad predictiva** de un modelo.  
Pero **no se mide sobre el futuro real**, sino sobre un per√≠odo conocido que se finge no haber visto.

---

#### üß™ ¬øC√≥mo se calcula?

1. Se toma una ventana de a√±os recientes (por ejemplo, los √∫ltimos 5 a√±os).
2. Se ajusta el modelo solo con los datos anteriores.
3. Se predicen esos √∫ltimos 5 a√±os.
4. Se comparan las predicciones con los valores reales y se mide el error porcentual promedio.

---

#### üß† ¬øPor qu√© es importante?

- Permite saber **qu√© tan bien hubiera predicho el modelo** en condiciones similares a las futuras.
- Es √∫til para **comparar modelos** entre s√≠:
    - Si un modelo A tiene MAPE = 3% y otro modelo B tiene 8%, el A es claramente superior.
- Ayuda a elegir el modelo que **menos se espera que se equivoque en el futuro**.

---

> üîç **Cuanto menor sea el MAPE, mejor es el modelo** para predecir.

Estos valores de MAPE muestran un modelo muy s√≥lido en general

| Regi√≥n   | MAPE  | Evaluaci√≥n    |
| -------- | ----- | ------------- |
| Am√©ricas | 2.57% | **Excelente** |
| √Åfrica   | 3.64% | **Excelente** |
| Europa   | 3.17% | **Excelente** |
| Asia     | 3.93% | **Excelente** |
| Ocean√≠a  | 4.76% | **Muy buena** |
""")



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1 ¬∑ Filtro base: series anuales 1990‚Äë2022
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
continents = ['Am√©ricas', '√Åfrica', 'Europa', 'Asia', 'Ocean√≠a']
gas = 'Emisiones (CO2eq) (AR5)'
prod_code = 6825  # ¬´Emisiones totales incluyendo LULUCF¬ª

mask = (
    (df_fao['√Årea'].isin(continents)) &
    (df_fao['Elemento'] == gas) &
    (df_fao['C√≥digo del producto'] == prod_code) &
    (df_fao['A√±o'].between(1990, 2022))
)

df_ts = (df_fao[mask]
         .assign(Valor_Mt = df_fao['Valor'] / 1000)
         .pivot_table(index='A√±o', columns='√Årea', values='Valor_Mt')
         .sort_index())
df_ts.index = pd.PeriodIndex(df_ts.index, freq='Y')

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2 ¬∑ Modelos por regi√≥n (ajuste individualizado)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
model_config = {
    'Asia':     ('sarimax_trend',     (0, 0, 2), 't'),
    '√Åfrica':   ('sarimax_trend',     (1, 0, 2), 't'),
    'Europa':   ('sarimax_constant',  (1, 0, 1), 'n'),
    'Am√©ricas': ('sarimax_constant',  (1, 0, 1), 'n'),
    'Ocean√≠a':  ('ets', None, None)
}

forecast_horizon = 5
results = {}

for cont in continents:
    y = df_ts[cont].dropna()
    model_type, order, trend = model_config[cont]

    if model_type in ['sarimax_trend', 'sarimax_constant']:
        model = SARIMAX(y, order=order, seasonal_order=(0, 0, 0, 0),
                        trend=trend, enforce_stationarity=False,
                        enforce_invertibility=False)
        fitted_model = model.fit(disp=False)
        forecast = fitted_model.get_forecast(steps=forecast_horizon)
        f_mean = forecast.predicted_mean
        f_ci = forecast.conf_int()

    elif model_type == 'ets':
        model = ExponentialSmoothing(y, trend='add', seasonal=None,
                                      initialization_method='estimated')
        fitted_model = model.fit()
        f_mean = fitted_model.forecast(forecast_horizon)
        std_resid = np.std(y.diff().dropna())
        ci_margin = 1.96 * std_resid
        f_ci = pd.DataFrame({
            'lower y': f_mean - ci_margin,
            'upper y': f_mean + ci_margin
        }, index=f_mean.index)

    results[cont] = {
        'model': fitted_model,
        'fc_mean': f_mean,
        'fc_ci': f_ci
    }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3 ¬∑ Visualizaci√≥n comparativa
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
sns.set_style('whitegrid')
fig, axes = plt.subplots(3, 2, figsize=(13, 9), sharex=True)
axes = axes.flatten()

for i, cont in enumerate(continents):
    ax = axes[i]
    y = df_ts[cont]
    fc_mean = results[cont]['fc_mean']
    fc_ci = results[cont]['fc_ci']

    # Convertir √≠ndices si es necesario
    hist_index = y.index.to_timestamp()
    pred_index = pd.to_datetime(fc_mean.index.to_timestamp() if hasattr(fc_mean.index, 'to_timestamp') else fc_mean.index)

    # Gr√°ficos
    ax.plot(hist_index, y, label='Hist√≥rico', color='steelblue')
    ax.plot(pred_index, fc_mean, label='Pron√≥stico', color='firebrick')
    ax.fill_between(pred_index,
                    fc_ci.iloc[:, 0].astype(float).values,
                    fc_ci.iloc[:, 1].astype(float).values,
                    color='firebrick', alpha=0.25, label='IC 95%')

    ax.set_title(cont)
    ax.set_ylabel('Mt CO‚ÇÇ‚Äëeq')
    ax.legend()

# Eliminar subgr√°ficos vac√≠os si sobran
if len(continents) < len(axes):
    for j in range(len(continents), len(axes)):
        fig.delaxes(axes[j])

fig.suptitle('Modelos por regi√≥n ‚Äì Pron√≥stico CO‚ÇÇeq (AR5)', y=1.02)
plt.tight_layout()
st.pyplot(fig)


st.markdown("""An√°lisis de resultados:


Am√©ricas

  * Modelo aplicado: SARIMAX(1,0,1) con constante.


  * Serie hist√≥rica: Presenta una clara suba desde 1990 hasta 2007-2008, seguida de una tendencia a la baja y una ca√≠da m√°s marcada post-2020.


  * Proyecci√≥n: El modelo mantiene la tendencia de los √∫ltimos a√±os y proyecta una estabilizaci√≥n levemente decreciente.


  * IC 95%: Bastante amplio ‚Üí refleja alta incertidumbre (probablemente por la inestabilidad reciente).


  * Interpretaci√≥n: La ca√≠da post-2019 parece ser influyente. El modelo no fuerza reversi√≥n al alza, lo que es razonable dado el comportamiento reciente.



√Åfrica
  * Modelo aplicado: SARIMAX(1,0,2) con tendencia.


  * Serie hist√≥rica: Tendencia fuertemente creciente y estable en el tiempo.


  * Proyecci√≥n: Continua el patr√≥n ascendente de forma bastante lineal.


  * IC 95%: Aumenta de forma moderada ‚Üí confianza razonable en la proyecci√≥n.


  * Interpretaci√≥n: Proyecci√≥n muy coherente con el patr√≥n de crecimiento constante, impulsado por el aumento poblacional y la industrializaci√≥n creciente en la regi√≥n.



Europa
  * Modelo aplicado: SARIMAX(1,0,1) con constante.


  * Serie hist√≥rica: Disminuci√≥n continua desde 1990, con cierta estabilizaci√≥n en los √∫ltimos 10 a√±os.


  * Proyecci√≥n: El modelo proyecta una ca√≠da m√°s lenta, tendiendo a una meseta.


  * IC 95%: Amplio pero sim√©trico, refleja cierta variabilidad pero no grandes shocks esperados.


  * Interpretaci√≥n: La pol√≠tica clim√°tica europea parece estar reflejada en esta tendencia. El modelo mantiene esa l√≠nea, sin anticipar un rebote.



Asia
  * Modelo aplicado: SARIMAX(0,0,2) con tendencia.


  * Serie hist√≥rica: Ascenso constante y muy pronunciado.


  * Proyecci√≥n: Contin√∫a con un crecimiento sostenido, acelerado.


  * IC 95%: Ligeramente divergente hacia arriba, consistente con la variabilidad creciente.


  * Interpretaci√≥n: Alta dependencia de Asia en combustibles f√≥siles y crecimiento econ√≥mico explica este patr√≥n. La proyecci√≥n es cre√≠ble pero tambi√©n preocupante.



Ocean√≠a
  * Modelo aplicado: Exponential Smoothing (ETS additive).


  * Serie hist√≥rica: Alta volatilidad, sin tendencia clara a largo plazo.


  * Proyecci√≥n: Leve crecimiento, pero con bandas de confianza muy anchas.


  * IC 95%: Muy amplio, incertidumbre alt√≠sima (l√≥gica, dada la volatilidad y tama√±o reducido).


  * Interpretaci√≥n: La ETS captura el comportamiento err√°tico sin imponer una tendencia clara. Es una buena elecci√≥n para esta serie poco predecible.

""")


st.markdown("""
## üåç Pron√≥stico a Largo Plazo (2023‚Äì2042)

Para obtener predicciones m√°s robustas a largo plazo (20 a√±os), se ajustaron modelos **SARIMA estacionales** a las series hist√≥ricas de emisiones totales de gases de efecto invernadero (CO‚ÇÇeq) en cada continente.

#### üìå Par√°metros del modelo
- **Modelo utilizado:** SARIMA(1,1,1)(1,1,1,10)
- **Horizonte de pron√≥stico:** 20 a√±os
- **Frecuencia:** Anual
- **Intervalo de confianza:** 95 %

#### üîç Justificaci√≥n
Este modelo combina:
- Un componente autorregresivo (AR)
- Un componente de media m√≥vil (MA)
- Diferenciaci√≥n regular y estacional
- Componente estacional con periodicidad 10 (ajuste emp√≠rico)

#### üß™ Resultados visuales
En los gr√°ficos:
- üìà La l√≠nea azul representa la serie hist√≥rica.
- üî¥ La l√≠nea roja representa la media del pron√≥stico.
- üî¥ La banda rosa muestra el intervalo de confianza al 95 %.

#### üß† Interpretaci√≥n
- El modelo proyecta la **tendencia futura esperada** junto con su nivel de incertidumbre.
- Si las bandas de confianza son **muy amplias**, implica una mayor incertidumbre en la predicci√≥n.
- Este enfoque es √∫til para **planificaci√≥n estrat√©gica a largo plazo**, aunque debe revisarse peri√≥dicamente con nuevos datos.

""")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Cargar y preparar los datos
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
continents = ['Am√©ricas', '√Åfrica', 'Europa', 'Asia', 'Ocean√≠a']
gas = 'Emisiones (CO2eq) (AR5)'
prod_code = 6825  # Emisiones totales incluyendo LULUCF

# Asegurate que `df_fao` est√© previamente cargado como DataFrame
df_fao['Valor_Mt'] = df_fao['Valor'] / 1000

mask = (
        df_fao['√Årea'].isin(continents) &
        (df_fao['Elemento'] == gas) &
        (df_fao['C√≥digo del producto'] == prod_code) &
        df_fao['A√±o'].between(1990, 2022)
)

df_ts = (
    df_fao[mask]
    .pivot_table(index='A√±o', columns='√Årea', values='Valor_Mt')
    .sort_index()
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Configuraci√≥n de modelo SARIMA
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
forecast_horizon = 20  # 20 a√±os
sarima_order = (1, 1, 1)
seasonal_order = (1, 1, 1, 10)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Par√°metros
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
df_ts.index = pd.to_datetime(df_ts.index, format='%Y')
continents = df_ts.columns.tolist()

# Define los par√°metros SARIMA (pueden ajustarse seg√∫n el caso)
sarima_order = (1, 1, 1)
seasonal_order = (1, 1, 1, 12)  # estacionalidad anual

st.markdown("## üìà Pron√≥stico de emisiones CO‚ÇÇeq por continente (2023‚Äì2042)")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Grilla 3x2 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
cols = st.columns(3)

for i, cont in enumerate(continents):
    y = df_ts[cont].dropna()
    index_hist = y.index

    # Modelo SARIMA
    model = SARIMAX(y,
                    order=sarima_order,
                    seasonal_order=seasonal_order,
                    enforce_stationarity=False,
                    enforce_invertibility=False)
    results = model.fit(disp=False)

    # Pron√≥stico
    forecast = results.get_forecast(steps=forecast_horizon)
    forecast_mean = forecast.predicted_mean
    forecast_ci = forecast.conf_int()

    # Eje de fechas del pron√≥stico
    forecast_index = pd.date_range(start=index_hist[-1] + pd.DateOffset(years=1),
                                   periods=forecast_horizon, freq='Y')

    # Gr√°fico
    fig = go.Figure()

    # Serie hist√≥rica
    fig.add_trace(go.Scatter(
        x=index_hist,
        y=y.values,
        mode='lines',
        name='Hist√≥rico',
        line=dict(color='steelblue')
    ))

    # Serie pronosticada
    fig.add_trace(go.Scatter(
        x=forecast_index,
        y=forecast_mean,
        mode='lines',
        name='Pron√≥stico',
        line=dict(color='firebrick')
    ))

    # IC 95%
    fig.add_trace(go.Scatter(
        x=forecast_index.tolist() + forecast_index[::-1].tolist(),
        y=list(forecast_ci.iloc[:, 0]) + list(forecast_ci.iloc[:, 1][::-1]),
        fill='toself',
        fillcolor='rgba(178,34,34,0.2)',
        line=dict(color='rgba(255,255,255,0)'),
        hoverinfo="skip",
        name='IC 95%'
    ))

    fig.update_layout(
        title=f"üåç {cont} ‚Äî SARIMA: Emisiones CO‚ÇÇeq",
        xaxis_title="A√±o",
        yaxis_title="Mt CO‚ÇÇeq",
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        margin=dict(t=60, l=30, r=30, b=30),
        height=400
    )

    # Mostrar en columna correspondiente
    cols[i % 3].plotly_chart(fig, use_container_width=True)



st.markdown("""# Utilizando ETS""")



# ---------- T√≠tulo ----------
st.markdown("## üìä Pron√≥stico de emisiones CO‚ÇÇeq usando modelo ETS (Holt-Winters)")

st.markdown("""
El modelo **ETS (Error, Tendencia, Estacionalidad)** es √∫til cuando se quiere capturar la din√°mica del crecimiento o descenso de una serie temporal. 
En este caso, utilizamos el componente de tendencia aditiva y sin estacionalidad, adecuado para series anuales sin fluctuaciones estacionales.

üîç *Esta predicci√≥n se realiza para las emisiones de CO‚ÇÇeq del continente 'Am√©ricas' desde 2023 hasta 2042.*
""")



# ---------- T√≠tulo ----------
st.markdown("## üìä Modelo ETS ‚Äì Pron√≥stico de emisiones CO‚ÇÇeq (2023‚Äì2042)")
st.markdown("""
Se utiliza el modelo **ETS (Error, Trend, Seasonality)** para proyectar las emisiones de CO‚ÇÇeq en cada continente.

üîß Este modelo se ajusta autom√°ticamente a la tendencia y proyecta 20 a√±os hacia adelante.
""")

# ---------- Suposici√≥n: df_ts ya est√° cargado correctamente ----------
# df_ts debe tener PeriodIndex (A√±o) y columnas = continentes ('Am√©ricas', 'Europa', 'Asia', 'Ocean√≠a', '√Åfrica')



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Configuraci√≥n general ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
forecast_years = 20
df_ts.index = pd.to_datetime(df_ts.index, format='%Y')
continentes = df_ts.columns.tolist()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Mostrar en grilla 3x2 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
cols = st.columns(3)
for i, continente in enumerate(continentes):
    y = df_ts[continente].dropna()

    # Modelo ETS
    model = ExponentialSmoothing(y, trend='add', seasonal=None, initialization_method='estimated')
    fitted_model = model.fit()
    forecast = fitted_model.forecast(forecast_years)

    # IC 95%
    std_resid = np.std(y.diff().dropna())
    ci_margin = 1.96 * std_resid
    ci_lower = forecast - ci_margin
    ci_upper = forecast + ci_margin

    # Gr√°fico
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=y.index, y=y, mode='lines', name='Hist√≥rico', line=dict(color='black', width=2)))
    fig.add_trace(go.Scatter(x=forecast.index, y=forecast, mode='lines', name='Pron√≥stico', line=dict(color='darkorange', width=2)))
    fig.add_trace(go.Scatter(x=forecast.index, y=ci_upper, line=dict(width=0), showlegend=False))
    fig.add_trace(go.Scatter(x=forecast.index, y=ci_lower, fill='tonexty', name='IC 95%', fillcolor='rgba(255,140,0,0.2)', line=dict(width=0)))

    fig.update_layout(
        title=f"üåç {continente} ‚Äì ETS: Emisiones CO‚ÇÇeq (2023‚Äì{forecast.index[-1].year})",
        xaxis_title='A√±o',
        yaxis_title='Mt CO‚ÇÇeq',
        margin=dict(l=20, r=20, t=40, b=20),
        height=400
    )

    # Mostrar en la columna correspondiente
    cols[i % 3].plotly_chart(fig, use_container_width=True)


st.markdown("""## üìà Modelo Prophet ‚Äì Predicci√≥n de emisiones 2023‚Äì2042

Se utiliza el modelo **Prophet** (desarrollado por Facebook) para proyectar las emisiones de CO‚ÇÇeq en cada continente durante los pr√≥ximos 20 a√±os.

### ¬øPor qu√© Prophet?
- Se adapta autom√°ticamente a patrones de tendencia y estacionalidad (si los hay).
- Es robusto frente a valores at√≠picos y cambios estructurales.
- Ideal para datos anuales como los analizados aqu√≠.

### ‚úîÔ∏è Metodolog√≠a
- Para cada continente se entren√≥ un modelo Prophet con los datos hist√≥ricos 1990‚Äì2022.
- Luego se proyectaron 20 a√±os adicionales (2023‚Äì2042).
- Se grafican:
  - Los valores hist√≥ricos (l√≠nea azul).
  - La predicci√≥n central (l√≠nea roja).
  - El intervalo de confianza del 95‚ÄØ% (franja roja clara).

---

### ‚úÖ Interpretaci√≥n esperada

- Si el modelo capta correctamente la tendencia (creciente o decreciente), la proyecci√≥n es valedera.
- La amplitud de la franja roja indica la **incertidumbre**: cuanto m√°s ancha, menos precisi√≥n tiene la predicci√≥n.
- En regiones con alta variabilidad (como Ocean√≠a), se espera mayor amplitud del intervalo.

---

> üìå **Advertencia**: Prophet no incluye componentes autorregresivos expl√≠citos, por lo que puede no capturar relaciones finas entre observaciones anuales consecutivas. Sin embargo, su robustez lo hace un excelente modelo comparativo frente a SARIMAX o ETS.
""")


# ---------- T√≠tulo principal ----------
st.markdown("## üìà Predicci√≥n de emisiones por continente (modelo Prophet)")

# ---------- Descripci√≥n detallada ----------
st.markdown("""
Se utiliza el modelo **Prophet** (desarrollado por Facebook) para proyectar las emisiones de CO‚ÇÇeq en cada continente durante los pr√≥ximos 20 a√±os.

### ¬øPor qu√© Prophet?
- Se adapta autom√°ticamente a patrones de tendencia y estacionalidad (si los hay).
- Es robusto frente a valores at√≠picos y cambios estructurales.
- Ideal para datos anuales como los analizados aqu√≠.

### ‚úÖ Metodolog√≠a
- Para cada continente se entren√≥ un modelo Prophet con los datos hist√≥ricos 1990‚Äì2022.
- Luego se proyectaron 20 a√±os adicionales (2023‚Äì2042).
- Se grafican:
  - Los valores hist√≥ricos (l√≠nea azul).
  - La predicci√≥n central (l√≠nea roja).
  - El intervalo de confianza del 95‚ÄØ% (franja roja clara).
""")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Silenciar warnings y logs ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
warnings.filterwarnings("ignore")  # Silencia todos los warnings
logging.getLogger('prophet').setLevel(logging.CRITICAL)
logging.getLogger('cmdstanpy').setLevel(logging.CRITICAL)
logging.getLogger('prophet').propagate = False
logging.getLogger('cmdstanpy').propagate = False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Estilo de gr√°ficos ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
sns.set_style("whitegrid")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ T√≠tulo Streamlit ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.title("üìä Forecast de emisiones CO‚ÇÇeq (AR5) con Prophet")
st.markdown("## Predicci√≥n por continente (1990‚Äë2022 + 20 a√±os)")
st.write(" ")
st.write(" ")
st.markdown("""# ¬øPor qu√© usar Prophet para modelar emisiones de CO‚ÇÇ?

## ¬øQu√© es Prophet?

**Prophet** es una herramienta de pron√≥stico de series temporales desarrollada por **Facebook (Meta)**. Est√° pensada para:

- Modelar **tendencias no lineales**.
- Capturar **cambios de r√©gimen** o inflexiones en la evoluci√≥n hist√≥rica.
- Incluir opcionalmente **estacionalidades** (diarias, semanales, anuales).
- Ser **f√°cil de usar** para analistas sin conocimientos avanzados en estad√≠stica.

---

## Prophet descompone la serie temporal de la siguiente forma:


    y(t) = g(t) + s(t) + h(t) + Œµ_t

Donde:

* g(t) ‚Üí Tendencia (puede ser lineal o log√≠stica, con posibles "cambios de pendiente").

* s(t) ‚Üí Estacionalidad (opcional, puede ser anual, semanal, diaria).

* h(t) ‚Üí Efectos por fechas especiales (festivos, eventos).

* Œµ_t ‚Üí Ruido aleatorio (residuo no explicado).


| Beneficio clave                       | ¬øPor qu√© importa en tu dataset?                                                                                                |
| ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |
|  Captura **cambios de tendencia**    | Las emisiones no evolucionan linealmente. Prophet detecta **cambios de pendiente autom√°ticamente**, lo que ARIMA no hace bien. |
|  No requiere **estacionariedad**     | Prophet **no exige diferenciar** ni transformar la serie. SARIMA s√≠, y esto puede distorsionar el significado del pron√≥stico.  |
|  Funciona bien con **datos anuales** | Las series son anuales. Prophet acepta f√°cilmente series con cualquier frecuencia sin reconfigurar nada.                       |
|  Maneja bien la **incertidumbre**    | Prophet devuelve autom√°ticamente **intervalos de confianza del 95%**, facilitando la comunicaci√≥n de riesgo/incertidumbre.     |
|  Automatizable por regi√≥n            | Se puede aplicar el mismo modelo a cada continente sin tunear manualmente los par√°metros. Ideal para **automatizaci√≥n**.          |
|  Interpretabilidad de componentes    | Prophet permite ver **la tendencia sola**, algo √∫til para an√°lisis visual y argumentaci√≥n.                                     |


 ### Conclusi√≥n:

Prophet es una excelente elecci√≥n para tu estudio de emisiones por continente porque:

* Se tiene series de m√°s de 30 a√±os.

* Las tendencias var√≠an marcadamente por regi√≥n.

* Se necesita proyectar 20 a√±os m√°s con un enfoque claro e interpretable.

* Requiere poco ajuste manual.

* Los resultados son f√°cilmente graficables y presentables.""")

st.write(" ")
st.write(" ")

# Silenciar warnings y logs molestos
warnings.filterwarnings("ignore")
logging.getLogger('prophet').setLevel(logging.CRITICAL)
logging.getLogger('cmdstanpy').setLevel(logging.CRITICAL)
logging.getLogger('prophet').propagate = False
logging.getLogger('cmdstanpy').propagate = False

# Configurar estilo
sns.set_style("whitegrid")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Datos base ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
continents = ['Am√©ricas', '√Åfrica', 'Europa', 'Asia', 'Ocean√≠a']
gas = 'Emisiones (CO2eq) (AR5)'
prod_code = 6825  # Emisiones totales incluyendo LULUCF

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Filtro base ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
mask = (
    (df_fao['√Årea'].isin(continents)) &
    (df_fao['Elemento'] == gas) &
    (df_fao['C√≥digo del producto'] == prod_code) &
    (df_fao['A√±o'].between(1990, 2022))
)

df_filtrado = df_fao[mask].copy()
df_filtrado['Valor_Mt'] = df_filtrado['Valor'] / 1000
df_ts = df_filtrado.pivot_table(index='A√±o', columns='√Årea', values='Valor_Mt')
df_ts = df_ts.sort_index()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Forecast por continente ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
results_prophet = {}
graficos = []

for cont in continents:
    try:
        serie = df_ts[cont].dropna().reset_index()
        serie.columns = ['ds', 'y']
        serie['ds'] = pd.to_datetime(serie['ds'], format='%Y')

        model = Prophet(yearly_seasonality=False, changepoint_prior_scale=0.5)
        model.fit(serie)

        future = model.make_future_dataframe(periods=20, freq='Y')
        forecast = model.predict(future)

        results_prophet[cont] = forecast

        fig, ax = plt.subplots(figsize=(5, 3.5))  # Tama√±o reducido y uniforme
        ax.plot(serie['ds'], serie['y'], label='Hist√≥rico', color='steelblue', linewidth=1.5)
        ax.plot(forecast['ds'], forecast['yhat'], label='Pron√≥stico', color='firebrick')
        ax.fill_between(forecast['ds'], forecast['yhat_lower'], forecast['yhat_upper'],
                        color='firebrick', alpha=0.25, label='IC 95%')
        ax.set_title(cont)
        ax.set_ylabel("Mt CO‚ÇÇ‚Äëeq")
        ax.set_xlabel("A√±o")
        ax.legend()
        ax.grid(True)

        graficos.append(fig)

    except Exception as e:
        graficos.append(f"‚ùå Error al procesar {cont}: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Mostrar en grilla 2x3 con un espacio vac√≠o al final ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.subheader("üîÆ Pron√≥sticos por continente (con Prophet)")

# Fila 1
cols1 = st.columns(3)
for i in range(3):
    with cols1[i]:
        st.pyplot(graficos[i])

# Fila 2
cols2 = st.columns(3)
for i in range(3):
    with cols2[i]:
        if i + 3 < len(graficos):
            st.pyplot(graficos[i + 3])
        else:
            st.empty()  # Celda vac√≠a para que la grilla quede uniforme



# ---------- Interpretaci√≥n final ----------
st.markdown("""
---

### ‚úÖ Interpretaci√≥n esperada

- Si el modelo capta correctamente la tendencia (creciente o decreciente), la proyecci√≥n es v√°lida.
- La **amplitud del intervalo** indica la **incertidumbre**: cuanto m√°s ancho, menos precisa la predicci√≥n.
- En regiones con alta variabilidad (como Ocean√≠a), se espera mayor amplitud del intervalo.

üî∫ **Advertencia**: Prophet no incluye componentes autorregresivos expl√≠citos, por lo que puede no capturar relaciones finas entre observaciones anuales consecutivas. Sin embargo, su robustez lo hace un excelente modelo comparativo frente a SARIMAX o ETS.
""")